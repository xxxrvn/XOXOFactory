[gd_scene load_steps=31 format=3 uid="uid://rc7owpla7mgs"]

[ext_resource type="Script" path="res://addons/FancyXoXo/Test.gd" id="1_67fru"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathShaderHandler.gd" id="2_0lgfn"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathDrawable.gd" id="2_f3cgx"]
[ext_resource type="Script" path="res://addons/FancyXoXo/CustomCombiEffects/EasyCCE.gd" id="3_emmth"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/SpiralHandler.gd" id="7_ovrq5"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/FactorPoint.gd" id="8_kn80v"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/PolyFactorBezierHandler.gd" id="9_cqkuq"]

[sub_resource type="Shader" id="Shader_ojrgc"]
code = "shader_type canvas_item;
 uniform vec2 positions[101];
 uniform vec2 norms[101];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 101-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==101-1){
				float d1=length(positions[101-1]-positions[101-2]);
				float d2=length(uv-positions[101-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(101+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ip405"]
shader = SubResource("Shader_ojrgc")
shader_parameter/positions = PackedVector2Array(100, 100, 102, 102.03, 104, 104.117, 106, 106.259, 108, 108.455, 110, 110.701, 112, 112.996, 114, 115.338, 116, 117.723, 118, 120.152, 120, 122.62, 122, 125.127, 124, 127.67, 126, 130.248, 128, 132.859, 130, 135.501, 132, 138.173, 134, 140.872, 136, 143.597, 138, 146.347, 140, 149.12, 142, 151.915, 144, 154.729, 146, 157.563, 148, 160.414, 150, 163.281, 152, 166.164, 154, 169.06, 156, 171.969, 158, 174.889, 160, 177.82, 162, 180.761, 164, 183.71, 166, 186.667, 168, 189.631, 170, 192.601, 172, 195.577, 174, 198.557, 176, 201.541, 178, 204.529, 180, 207.52, 182, 210.513, 184, 213.508, 186, 216.505, 188, 219.503, 190, 222.501, 192, 225.501, 194, 228.5, 196, 231.5, 198, 234.5, 200, 237.5, 202, 240.5, 204, 243.5, 206, 246.5, 208, 249.501, 210, 252.501, 212, 255.503, 214, 258.505, 216, 261.508, 218, 264.513, 220, 267.52, 222, 270.529, 224, 273.541, 226, 276.557, 228, 279.577, 230, 282.601, 232, 285.631, 234, 288.667, 236, 291.71, 238, 294.761, 240, 297.82, 242, 300.889, 244, 303.969, 246, 307.06, 248, 310.164, 250, 313.281, 252, 316.414, 254, 319.563, 256, 322.729, 258, 325.915, 260, 329.12, 262, 332.347, 264, 335.597, 266, 338.872, 268, 342.173, 270, 345.501, 272, 348.859, 274, 352.248, 276, 355.67, 278, 359.127, 280, 362.62, 282, 366.152, 284, 369.723, 286, 373.338, 288, 376.996, 290, 380.701, 292, 384.455, 294, 388.259, 296, 392.117, 298, 396.03, 300, 400)
shader_parameter/norms = PackedVector2Array(0.707646, -0.706568, 0.717272, -0.696793, 0.726631, -0.687028, 0.735231, -0.677817, 0.743155, -0.669119, 0.750456, -0.660921, 0.757192, -0.653193, 0.763418, -0.645905, 0.769172, -0.639041, 0.774486, -0.632591, 0.7794, -0.626527, 0.783928, -0.620852, 0.788145, -0.61549, 0.792019, -0.610496, 0.795614, -0.605804, 0.798969, -0.601372, 0.802038, -0.597273, 0.804858, -0.593468, 0.807492, -0.589879, 0.809903, -0.586563, 0.812149, -0.583451, 0.814221, -0.580555, 0.816092, -0.577922, 0.817829, -0.575461, 0.819448, -0.573154, 0.820905, -0.571065, 0.822231, -0.569155, 0.823445, -0.567397, 0.824564, -0.565768, 0.825549, -0.56433, 0.826468, -0.562984, 0.827266, -0.561811, 0.828011, -0.560712, 0.828648, -0.55977, 0.829212, -0.558934, 0.829737, -0.558155, 0.830171, -0.557509, 0.83055, -0.556944, 0.830853, -0.556492, 0.831145, -0.556055, 0.831394, -0.555683, 0.831561, -0.555434, 0.831711, -0.555208, 0.831812, -0.555057, 0.831881, -0.554954, 0.831959, -0.554837, 0.832014, -0.554754, 0.832044, -0.55471, 0.83205, -0.5547, 0.832037, -0.55472, 0.832063, -0.554681, 0.83206, -0.554686, 0.832054, -0.554695, 0.832067, -0.554676, 0.832093, -0.554637, 0.832161, -0.554534, 0.832216, -0.554451, 0.832307, -0.554315, 0.832405, -0.554168, 0.832544, -0.553959, 0.832732, -0.553676, 0.832949, -0.55335, 0.833236, -0.552917, 0.833539, -0.552461, 0.833944, -0.55185, 0.834343, -0.551245, 0.834809, -0.55054, 0.835387, -0.549662, 0.835981, -0.548758, 0.83667, -0.547708, 0.837391, -0.546604, 0.838219, -0.545333, 0.839088, -0.543996, 0.840073, -0.542474, 0.841169, -0.540772, 0.842263, -0.539066, 0.843513, -0.537109, 0.844753, -0.535156, 0.846125, -0.532985, 0.84763, -0.530588, 0.849207, -0.52806, 0.850847, -0.525414, 0.852531, -0.522677, 0.854342, -0.519712, 0.856186, -0.516668, 0.858142, -0.513413, 0.860211, -0.509939, 0.862313, -0.506375, 0.864439, -0.502738, 0.866679, -0.498867, 0.868986, -0.494837, 0.8713, -0.490752, 0.873707, -0.486453, 0.876224, -0.481905, 0.878731, -0.477318, 0.881273, -0.472607, 0.883846, -0.467778, 0.886429, -0.462864, 0.889064, -0.457783, 0.891767, -0.452495, 0.894304, -0.447459)
shader_parameter/time = 4411.71
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_kyp8h"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_s7vqk"]
gradient = SubResource("Gradient_kyp8h")

[sub_resource type="Resource" id="Resource_wafln"]
script = ExtResource("8_kn80v")
p = Vector2(100, 100)
f = 1.0

[sub_resource type="Resource" id="Resource_jxwkk"]
script = ExtResource("8_kn80v")
p = Vector2(150, 150)
f = 1.0

[sub_resource type="Resource" id="Resource_p5iyy"]
script = ExtResource("8_kn80v")
p = Vector2(200, 250)
f = 1.0

[sub_resource type="Resource" id="Resource_r4yw1"]
script = ExtResource("8_kn80v")
p = Vector2(250, 300)
f = 1.0

[sub_resource type="Resource" id="Resource_lhfgx"]
script = ExtResource("8_kn80v")
p = Vector2(300, 400)
f = 1.0

[sub_resource type="Resource" id="Resource_g6o6w"]
script = ExtResource("9_cqkuq")
Points = Array[ExtResource("8_kn80v")]([SubResource("Resource_wafln"), SubResource("Resource_jxwkk"), SubResource("Resource_p5iyy"), SubResource("Resource_r4yw1"), SubResource("Resource_lhfgx")])
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_hldsy"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_4wnyg"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_eklyd"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_g5yct"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP"
DeleteShaderFile = false
shaderQuality = 100
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_hldsy")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_4wnyg")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_eklyd")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[sub_resource type="Shader" id="Shader_jpf7p"]
code = "shader_type canvas_item;
 uniform vec2 positions[301];
 uniform vec2 norms[301];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 301-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==301-1){
				float d1=length(positions[301-1]-positions[301-2]);
				float d2=length(uv-positions[301-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(301+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nhvpd"]
shader = SubResource("Shader_jpf7p")
shader_parameter/positions = PackedVector2Array(40, 0, 40.1579, 0.841187, 40.298, 1.68898, 40.4201, 2.54302, 40.524, 3.4029, 40.6096, 4.26825, 40.6767, 5.13866, 40.725, 6.01375, 40.7545, 6.89311, 40.7649, 7.77632, 40.7561, 8.66299, 40.7281, 9.55268, 40.6805, 10.445, 40.6134, 11.3395, 40.5265, 12.2357, 40.4199, 13.1332, 40.2934, 14.0316, 40.1469, 14.9305, 39.9804, 15.8294, 39.7938, 16.7278, 39.587, 17.6253, 39.36, 18.5214, 39.1127, 19.4157, 38.8453, 20.3078, 38.5575, 21.1972, 38.2495, 22.0833, 37.9212, 22.9659, 37.5726, 23.8443, 37.2038, 24.7182, 36.8149, 25.587, 36.4058, 26.4503, 35.9766, 27.3077, 35.5274, 28.1587, 35.0584, 29.0028, 34.5694, 29.8395, 34.0608, 30.6685, 33.5326, 31.4892, 32.9848, 32.3011, 32.4177, 33.1039, 31.8314, 33.897, 31.2261, 34.6801, 30.6019, 35.4526, 29.9589, 36.2141, 29.2975, 36.9642, 28.6177, 37.7024, 27.9198, 38.4283, 27.204, 39.1414, 26.4706, 39.8414, 25.7197, 40.5277, 24.9516, 41.2, 24.1667, 41.8579, 23.3651, 42.5009, 22.5471, 43.1286, 21.713, 43.7406, 20.8632, 44.3365, 19.9979, 44.916, 19.1174, 45.4786, 18.2222, 46.0239, 17.3124, 46.5517, 16.3885, 47.0614, 15.4508, 47.5528, 14.4998, 48.0255, 13.5356, 48.4792, 12.5588, 48.9134, 11.5698, 49.328, 10.5688, 49.7225, 9.55645, 50.0966, 8.533, 50.4501, 7.49893, 50.7826, 6.45466, 51.0939, 5.40064, 51.3836, 4.3373, 51.6515, 3.26511, 51.8974, 2.18452, 52.1209, 1.09599, 52.3219, -2.29485e-06, 52.5, -1.10297, 52.6551, -2.21243, 52.787, -3.32789, 52.8954, -4.44887, 52.9802, -5.57485, 53.0412, -6.70533, 53.0781, -7.83979, 53.091, -8.97771, 53.0795, -10.1186, 53.0435, -11.2619, 52.983, -12.4071, 52.8978, -13.5536, 52.7878, -14.7009, 52.6529, -15.8486, 52.493, -16.9959, 52.3081, -18.1425, 52.0981, -19.2877, 51.8629, -20.4309, 51.6026, -21.5717, 51.317, -22.7095, 51.0063, -23.8436, 50.6703, -24.9737, 50.3091, -26.099, 49.9228, -27.2191, 49.5113, -28.3333, 49.0748, -29.4412, 48.6132, -30.5421, 48.1267, -31.6356, 47.6153, -32.7209, 47.0792, -33.7976, 46.5185, -34.8652, 45.9332, -35.923, 45.3236, -36.9706, 44.6898, -38.0073, 44.0319, -39.0326, 43.3501, -40.046, 42.6447, -41.0469, 41.9157, -42.0348, 41.1635, -43.0091, 40.3883, -43.9694, 39.5902, -44.915, 38.7696, -45.8455, 37.9267, -46.7604, 37.0618, -47.659, 36.1752, -48.541, 35.2671, -49.4058, 34.3379, -50.2529, 33.388, -51.0818, 32.4175, -51.8921, 31.427, -52.6832, 30.4167, -53.4547, 29.387, -54.2061, 28.3383, -54.937, 27.271, -55.6469, 26.1854, -56.3353, 25.0821, -57.0019, 23.9614, -57.6461, 22.8237, -58.2677, 21.6696, -58.8661, 20.4994, -59.441, 19.3136, -59.992, 18.1127, -60.5187, 16.8971, -61.0207, 15.6675, -61.4977, 14.4242, -61.9493, 13.1677, -62.3752, 11.8987, -62.7751, 10.6176, -63.1486, 9.32496, -63.4953, 8.02133, -63.8152, 6.70724, -64.1077, 5.38328, -64.3727, 4.04998, -64.6099, 2.70796, -64.8191, 1.35777, -65, -5.68248e-06, -65.1524, -1.36475, -65.276, -2.73587, -65.3708, -4.11279, -65.4364, -5.49485, -65.4727, -6.88146, -65.4796, -8.27199, -65.4568, -9.66583, -65.4044, -11.0623, -65.3221, -12.4609, -65.2098, -13.8608, -65.0675, -15.2615, -64.8951, -16.6622, -64.6924, -18.0625, -64.4595, -19.4615, -64.1963, -20.8586, -63.9028, -22.2533, -63.579, -23.6448, -63.2248, -25.0325, -62.8403, -26.4156, -62.4256, -27.7937, -61.9807, -29.1659, -61.5055, -30.5316, -61.0004, -31.8902, -60.4652, -33.241, -59.9001, -34.5833, -59.3053, -35.9165, -58.6808, -37.24, -58.0268, -38.5529, -57.3436, -39.8548, -56.6312, -41.145, -55.8898, -42.4227, -55.1198, -43.6874, -54.3212, -44.9384, -53.4943, -46.1751, -52.6394, -47.3968, -51.7568, -48.6028, -50.8466, -49.7927, -49.9093, -50.9657, -48.9451, -52.1213, -47.9544, -53.2587, -46.9374, -54.3775, -45.8945, -55.477, -44.8262, -56.5565, -43.7327, -57.6157, -42.6144, -58.6537, -41.4719, -59.6702, -40.3053, -60.6644, -39.1154, -61.6359, -37.9023, -62.5842, -36.6667, -63.5085, -35.4089, -64.4085, -34.1295, -65.2837, -32.8289, -66.1334, -31.5077, -66.9572, -30.1663, -67.7546, -28.8053, -68.5252, -27.4253, -69.2683, -26.0267, -69.9837, -24.6102, -70.6708, -23.1763, -71.3292, -21.7256, -71.9585, -20.2586, -72.5583, -18.7761, -73.128, -17.2785, -73.6675, -15.7667, -74.1762, -14.241, -74.6538, -12.7022, -75.1, -11.151, -75.5145, -9.588, -75.8968, -8.01384, -76.2467, -6.42926, -76.5639, -4.83487, -76.8481, -3.23139, -77.099, -1.61956, -77.3164, 9.24178e-07, -77.5, 1.62654, -77.6496, 3.25931, -77.7651, 4.89766, -77.8461, 6.54083, -77.8925, 8.18806, -77.9042, 9.83866, -77.881, 11.4919, -77.8228, 13.1469, -77.7294, 14.8031, -77.6007, 16.4597, -77.4367, 18.1158, -77.2373, 19.7709, -77.0024, 21.4239, -76.732, 23.0744, -76.426, 24.7214, -76.0845, 26.3641, -75.7075, 28.002, -75.295, 29.634, -74.847, 31.2596, -74.3636, 32.8779, -73.8449, 34.4881, -73.291, 36.0895, -72.7019, 37.6814, -72.0779, 39.2629, -71.419, 40.8333, -70.7254, 42.3919, -69.9973, 43.9378, -69.2349, 45.4703, -68.4384, 46.9888, -67.6079, 48.4923, -66.7439, 49.9802, -65.8465, 51.4517, -64.9159, 52.9062, -63.9526, 54.3428, -62.9568, 55.7609, -61.9287, 57.1597, -60.8689, 58.5385, -59.7775, 59.8966, -58.6551, 61.2334, -57.502, 62.548, -56.3185, 63.8399, -55.1051, 65.1084, -53.8623, 66.3527, -52.5905, 67.5723, -51.2901, 68.7664, -49.9618, 69.9345, -48.6058, 71.0759, -47.2228, 72.19, -45.8132, 73.2762, -44.3776, 74.3338, -42.9167, 75.3624, -41.4308, 76.3612, -39.9207, 77.3298, -38.3868, 78.2675, -36.8299, 79.174, -35.2505, 80.0484, -33.6493, 80.8906, -32.0268, 81.6998, -30.3838, 82.4755, -28.721, 83.2174, -27.039, 83.925, -25.3384, 84.5978, -23.6201, 85.2353, -21.8847, 85.8372, -20.133, 86.403, -18.3655, 86.9324, -16.5832, 87.425, -14.7868, 87.8804, -12.977, 88.2982, -11.1546, 88.6782, -9.32047, 89.02, -7.47522, 89.3234, -5.61974, 89.588, -3.75486, 89.8136, -1.88133, 90, 1.57361e-05)
shader_parameter/norms = PackedVector2Array(0.981411, -0.19192, 0.984788, -0.173759, 0.988333, -0.152311, 0.991407, -0.130813, 0.994015, -0.109242, 0.996152, -0.0876369, 0.99782, -0.0659899, 0.999017, -0.0443308, 0.999744, -0.0226381, 1, -0.000955466, 0.999785, 0.0207245, 0.999101, 0.0423945, 0.997948, 0.0640265, 0.996326, 0.0856417, 0.994237, 0.107206, 0.991683, 0.128704, 0.988664, 0.150145, 0.985184, 0.171501, 0.981242, 0.192781, 0.976842, 0.213964, 0.971983, 0.235051, 0.966674, 0.256009, 0.960912, 0.276852, 0.954708, 0.297544, 0.948054, 0.318109, 0.940962, 0.338512, 0.93343, 0.35876, 0.925466, 0.378831, 0.917072, 0.398723, 0.908251, 0.418426, 0.899007, 0.437934, 0.889354, 0.45722, 0.879285, 0.476296, 0.868809, 0.495148, 0.857929, 0.513769, 0.846653, 0.532145, 0.834988, 0.550269, 0.822939, 0.56813, 0.810506, 0.58573, 0.797702, 0.603052, 0.784526, 0.620096, 0.770995, 0.636841, 0.757108, 0.65329, 0.742868, 0.669438, 0.728288, 0.685271, 0.71338, 0.700777, 0.698142, 0.715959, 0.682579, 0.730812, 0.666704, 0.745323, 0.650518, 0.759491, 0.634048, 0.773294, 0.617278, 0.786745, 0.600228, 0.799829, 0.582906, 0.812539, 0.565319, 0.824872, 0.547471, 0.836825, 0.529371, 0.84839, 0.511037, 0.859559, 0.492461, 0.870335, 0.473667, 0.880704, 0.454661, 0.890665, 0.435443, 0.900216, 0.416024, 0.909354, 0.396426, 0.918067, 0.376643, 0.926358, 0.356693, 0.934222, 0.336577, 0.941656, 0.316313, 0.948655, 0.295901, 0.955219, 0.275365, 0.96134, 0.254705, 0.967019, 0.233924, 0.972255, 0.213041, 0.977043, 0.192067, 0.981382, 0.171004, 0.98527, 0.149857, 0.988708, 0.12866, 0.991689, 0.107395, 0.994216, 0.0860948, 0.996287, 0.0647521, 0.997901, 0.043381, 0.999059, 0.0219894, 0.999758, 0.000598703, 1, -0.0207961, 0.999784, -0.0421732, 0.99911, -0.0635317, 0.99798, -0.0848516, 0.996394, -0.106137, 0.994352, -0.127371, 0.991855, -0.148546, 0.988905, -0.169648, 0.985505, -0.190666, 0.981655, -0.211602, 0.977356, -0.232439, 0.972611, -0.253154, 0.967426, -0.273768, 0.961796, -0.294246, 0.95573, -0.314587, 0.949229, -0.334784, 0.942295, -0.354825, 0.934933, -0.374708, 0.927143, -0.394417, 0.918932, -0.413939, 0.910305, -0.433271, 0.901263, -0.452404, 0.891813, -0.471331, 0.881957, -0.490041, 0.871699, -0.508528, 0.861046, -0.526779, 0.850002, -0.544785, 0.838576, -0.562542, 0.826769, -0.580048, 0.814582, -0.597278, 0.802034, -0.614247, 0.789114, -0.630929, 0.775841, -0.647322, 0.762216, -0.663421, 0.748247, -0.679217, 0.733938, -0.6947, 0.7193, -0.709865, 0.704338, -0.724712, 0.689052, -0.739231, 0.673452, -0.753406, 0.657556, -0.767245, 0.641354, -0.780727, 0.624872, -0.793855, 0.608107, -0.806624, 0.591065, -0.81903, 0.573751, -0.83106, 0.556183, -0.842709, 0.538369, -0.853979, 0.520308, -0.86486, 0.502013, -0.875345, 0.483499, -0.885438, 0.464757, -0.895127, 0.445811, -0.90441, 0.426664, -0.913282, 0.407329, -0.921741, 0.387807, -0.929783, 0.368108, -0.937402, 0.348249, -0.944598, 0.328229, -0.951364, 0.308069, -0.957699, 0.287773, -0.963603, 0.267337, -0.969068, 0.246792, -0.974097, 0.226132, -0.978683, 0.205376, -0.98283, 0.184516, -0.986528, 0.16359, -0.989783, 0.142582, -0.992589, 0.121519, -0.994948, 0.100394, -0.996856, 0.0792309, -0.998315, 0.0580343, -0.999322, 0.0368151, -0.999879, 0.0155646, -0.999984, -0.0056715, -0.999638, -0.0269115, -0.99884, -0.0481453, -0.997593, -0.0693394, -0.995896, -0.0905097, -0.993749, -0.111639, -0.991154, -0.132718, -0.988113, -0.15373, -0.984626, -0.174676, -0.980695, -0.195546, -0.976324, -0.216315, -0.971512, -0.236992, -0.966261, -0.257563, -0.960578, -0.278011, -0.954461, -0.298337, -0.947914, -0.318526, -0.940943, -0.338566, -0.933548, -0.358454, -0.925732, -0.37818, -0.917498, -0.39774, -0.908853, -0.417116, -0.8998, -0.436302, -0.890342, -0.455293, -0.880484, -0.474076, -0.870234, -0.492639, -0.859587, -0.51099, -0.84856, -0.529099, -0.837147, -0.546979, -0.82536, -0.564607, -0.813201, -0.581983, -0.800679, -0.599094, -0.787798, -0.615934, -0.774561, -0.632499, -0.760982, -0.648773, -0.747055, -0.664763, -0.732794, -0.680451, -0.71821, -0.695827, -0.703302, -0.710891, -0.688073, -0.725642, -0.672547, -0.740054, -0.65671, -0.754143, -0.640577, -0.767894, -0.624173, -0.781286, -0.607475, -0.794339, -0.590506, -0.807033, -0.57328, -0.819359, -0.555793, -0.831321, -0.538053, -0.842911, -0.520083, -0.854116, -0.501872, -0.864942, -0.483445, -0.875374, -0.464801, -0.885415, -0.445938, -0.895064, -0.426885, -0.904306, -0.407633, -0.913146, -0.388209, -0.921571, -0.368618, -0.929581, -0.34884, -0.937182, -0.328921, -0.944357, -0.308861, -0.951107, -0.288651, -0.957434, -0.268325, -0.963329, -0.247875, -0.968792, -0.227306, -0.973823, -0.206637, -0.978418, -0.185898, -0.982569, -0.165055, -0.986284, -0.144156, -0.989555, -0.123168, -0.992386, -0.102141, -0.99477, -0.0810789, -0.996708, -0.0599525, -0.998201, -0.0388255, -0.999246, -0.0176802, -0.999844, 0.00347758, -0.999994, 0.0246382, -0.999696, 0.0457808, -0.998952, 0.0669082, -0.997759, 0.0879872, -0.996122, 0.109044, -0.994037, 0.130042, -0.991508, 0.15098, -0.988537, 0.171854, -0.985123, 0.19265, -0.981268, 0.213361, -0.976973, 0.23397, -0.972244, 0.254486, -0.967076, 0.274877, -0.961479, 0.295138, -0.955455, 0.315281, -0.948998, 0.33527, -0.942122, 0.355114, -0.934823, 0.3748, -0.927105, 0.394313, -0.918976, 0.413656, -0.910433, 0.432809, -0.901486, 0.451765, -0.892137, 0.470526, -0.882386, 0.489068, -0.872246, 0.507395, -0.861713, 0.525495, -0.850797, 0.543359, -0.839501, 0.560977, -0.827831, 0.578348, -0.81579, 0.595456, -0.803388, 0.612302, -0.790624, 0.628869, -0.777511, 0.645158, -0.764049, 0.661159, -0.750246, 0.676867, -0.736106, 0.692266, -0.721642, 0.707359, -0.706855, 0.722131, -0.691756, 0.73658, -0.676351, 0.750703, -0.660639, 0.764497, -0.644627, 0.777939, -0.62834, 0.791043, -0.611761, 0.803782, -0.594924, 0.816169, -0.577813, 0.828193, -0.560443, 0.839845, -0.542826, 0.85112, -0.524971, 0.86202, -0.506875, 0.872529, -0.488563, 0.882651, -0.47003, 0.892379, -0.451287, 0.901708, -0.432345, 0.910638, -0.413205, 0.919162, -0.39388, 0.927271, -0.37439, 0.934972, -0.354721, 0.942252, -0.334904, 0.949109, -0.314947, 0.955548, -0.294837, 0.96156, -0.274595, 0.967141, -0.254239, 0.972293, -0.233764, 0.977011, -0.213191, 0.981292, -0.192525, 0.985139, -0.171759, 0.988545, -0.150927, 0.991509, -0.130036, 0.994034, -0.109071, 0.995831, -0.091223)
shader_parameter/time = 3482.33
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_bx708"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_yej88"]
gradient = SubResource("Gradient_bx708")

[sub_resource type="Resource" id="Resource_5hqd2"]
script = ExtResource("7_ovrq5")
standartX = 40.0
standartY = 40.0
variantX = 50.0
variantY = 50.0
pseudoX = 1.0
pseudoY = 1.0
powerX = 1.0
powerY = 1.0
adjustX = 0.0
adjustY = 0.0
length = 1.5
logarythmic = true
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_uod5l"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_upp4r"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_ivaai"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_obuyd"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP2"
DeleteShaderFile = false
shaderQuality = 300
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_uod5l")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_upp4r")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_ivaai")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[node name="Test" type="Node2D"]
script = ExtResource("1_67fru")

[node name="WPDTest" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_ip405")
texture = SubResource("GradientTexture2D_s7vqk")
polygon = PackedVector2Array(92.3347, 106.422, 90.5283, 103.207, 90.0099, 99.5562, 90.85, 95.9656, 92.9343, 92.9235, 95.9795, 90.8438, 99.5714, 90.0092, 103.222, 90.5331, 106.434, 92.3445, 107.076, 92.9343, 113.613, 99.7639, 120.088, 107.064, 126.514, 114.77, 132.901, 122.826, 139.259, 131.179, 145.593, 139.784, 151.909, 148.594, 158.209, 157.571, 164.497, 166.677, 170.775, 175.882, 177.044, 185.158, 183.307, 194.482, 189.565, 203.835, 195.819, 213.204, 202.07, 222.578, 208.321, 231.953, 214.571, 241.328, 220.822, 250.709, 227.076, 260.102, 233.334, 269.522, 239.596, 278.986, 245.865, 288.517, 252.14, 298.142, 258.423, 307.891, 264.714, 317.801, 271.013, 327.91, 277.32, 338.264, 283.634, 348.91, 289.954, 359.899, 296.281, 371.293, 302.611, 383.147, 308.943, 395.525, 309.299, 396.322, 310, 399.942, 309.341, 403.571, 307.412, 406.713, 304.475, 408.943, 300.929, 409.957, 297.257, 409.616, 293.958, 407.969, 291.481, 405.237, 291.057, 404.475, 284.889, 392.415, 278.719, 380.861, 272.546, 369.746, 266.366, 359, 260.18, 348.571, 253.987, 338.405, 247.786, 328.452, 241.577, 318.672, 235.36, 309.024, 229.135, 299.477, 222.904, 290.002, 216.666, 280.576, 210.424, 271.179, 204.178, 261.797, 197.929, 252.422, 191.679, 243.047, 185.43, 233.672, 179.181, 224.302, 172.935, 214.946, 166.693, 205.616, 160.456, 196.33, 154.225, 187.112, 148.003, 177.989, 141.791, 168.992, 135.591, 160.159, 129.407, 151.531, 123.241, 143.156, 117.099, 135.085, 110.986, 127.375, 104.912, 120.09, 98.8875, 113.298, 92.9235, 107.066)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_g6o6w")
ShaderHandler = SubResource("Resource_g5yct")
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0

[node name="WPDTest2" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_nhvpd")
position = Vector2(501, 431)
texture = SubResource("GradientTexture2D_yej88")
polygon = PackedVector2Array(30.056, 1.05655, 30.3492, -2.61939, 31.9547, -5.93912, 34.6543, -8.45123, 38.0808, -9.81411, 41.7683, -9.84242, 45.2153, -8.53231, 47.9532, -6.06195, 49.6095, -2.76726, 49.8141, -1.9192, 50.0963, -0.366117, 50.3342, 1.23489, 50.5206, 2.85044, 50.6549, 4.47876, 50.7365, 6.11807, 50.7649, 7.76677, 50.7395, 9.42311, 50.66, 11.0852, 50.5258, 12.7517, 50.3367, 14.4203, 50.0925, 16.0894, 49.7928, 17.7572, 49.4376, 19.4218, 49.0267, 21.0815, 48.5602, 22.7343, 48.038, 24.3783, 47.4603, 26.0117, 46.8273, 27.6326, 46.139, 29.2392, 45.3958, 30.8297, 44.5982, 32.4019, 43.7464, 33.9543, 42.841, 35.4849, 41.8824, 36.9919, 40.8714, 38.4734, 39.8085, 39.9276, 38.6944, 41.3528, 37.53, 42.747, 36.316, 44.1088, 35.0536, 45.4361, 33.7434, 46.7274, 32.3867, 47.981, 30.9844, 49.1952, 29.5378, 50.3683, 28.0481, 51.4988, 26.5164, 52.5853, 24.944, 53.626, 23.3325, 54.6195, 21.6831, 55.5645, 19.9975, 56.4595, 18.2769, 57.3031, 16.5231, 58.0941, 14.7376, 58.8312, 12.9222, 59.5132, 11.0786, 60.1389, 9.20831, 60.7073, 7.31333, 61.2173, 5.39551, 61.6678, 3.45667, 62.058, 1.49856, 62.3871, -0.47662, 62.6541, -2.46695, 62.8583, -4.47062, 62.9991, -6.48543, 63.0757, -8.50936, 63.0877, -10.5403, 63.0346, -12.5762, 62.9159, -14.615, 62.7313, -16.6544, 62.4804, -18.6924, 62.1632, -20.7268, 61.7793, -22.7553, 61.3287, -24.7758, 60.8115, -26.7861, 60.2276, -28.7841, 59.5772, -30.7673, 58.8607, -32.7339, 58.078, -34.6815, 57.2297, -36.6079, 56.3163, -38.511, 55.338, -40.3885, 54.2957, -42.2384, 53.1898, -44.0584, 52.0211, -45.8465, 50.7905, -47.6005, 49.4987, -49.3184, 48.1467, -50.9982, 46.7355, -52.6377, 45.2661, -54.235, 43.7398, -55.7881, 42.1576, -57.2952, 40.5209, -58.7543, 38.8311, -60.1634, 37.0895, -61.5209, 35.2976, -62.825, 33.457, -64.074, 31.5691, -65.266, 29.6358, -66.3996, 27.6587, -67.4732, 25.6395, -68.4851, 23.5802, -69.4341, 21.4825, -70.3186, 19.3485, -71.1373, 17.1802, -71.8889, 14.9794, -72.5722, 12.7484, -73.186, 10.4892, -73.7293, 8.20412, -74.201, 5.89515, -74.6002, 3.56477, -74.9259, 1.21518, -75.1774, -1.15142, -75.3539, -3.53244, -75.4548, -5.92571, -75.4794, -8.3287, -75.4273, -10.7391, -75.298, -13.1542, -75.0912, -15.5719, -74.8066, -17.9894, -74.444, -20.4044, -74.0033, -22.8141, -73.4844, -25.2162, -72.8874, -27.6081, -72.2125, -29.9873, -71.4598, -32.3511, -70.6297, -34.6972, -69.7225, -37.0228, -68.7387, -39.3256, -67.6788, -41.603, -66.5435, -43.8524, -65.3335, -46.0714, -64.0496, -48.2575, -62.6926, -50.4082, -61.2636, -52.5211, -59.7636, -54.5938, -58.1936, -56.6239, -56.5549, -58.609, -54.8488, -60.5469, -53.0766, -62.4352, -51.2398, -64.2718, -49.3399, -66.0543, -47.3784, -67.7807, -45.3571, -69.4488, -43.2776, -71.0566, -41.1417, -72.6021, -38.9514, -74.0834, -36.7085, -75.4984, -34.4151, -76.8454, -32.0733, -78.1225, -29.685, -79.3282, -27.2526, -80.4607, -24.7784, -81.5184, -22.2645, -82.4999, -19.7134, -83.4036, -17.1275, -84.2282, -14.5092, -84.9724, -11.8611, -85.635, -9.18554, -86.2149, -6.48542, -86.7109, -3.76309, -87.1221, -1.02141, -87.4477, 1.737, -87.6867, 4.50941, -87.8385, 7.29304, -87.9025, 10.085, -87.878, 12.8826, -87.7646, 15.683, -87.5619, 18.4834, -87.2697, 21.2807, -86.8877, 24.0722, -86.4159, 26.855, -85.8543, 29.6261, -85.2028, 32.3828, -84.4618, 35.122, -83.6315, 37.8408, -82.7122, 40.5365, -81.7044, 43.2061, -80.6087, 45.8467, -79.4257, 48.4554, -78.1563, 51.0296, -76.801, 53.5662, -75.361, 56.0626, -73.8373, 58.516, -72.2309, 60.9235, -70.5431, 63.2827, -68.7751, 65.5907, -66.9284, 67.845, -65.0044, 70.0429, -63.0047, 72.1819, -60.9309, 74.2596, -58.7848, 76.2735, -56.5681, 78.2212, -54.2828, 80.1005, -51.9308, 81.9089, -49.5143, 83.6443, -47.0352, 85.3046, -44.496, 86.8877, -41.8987, 88.3916, -39.2458, 89.8143, -36.5397, 91.1541, -33.7829, 92.4091, -30.9778, 93.5775, -28.1272, 94.6578, -25.2337, 95.6485, -22.3002, 96.548, -19.3292, 97.3551, -16.3237, 98.0683, -13.2866, 98.6866, -10.2206, 99.2088, -7.129, 99.634, -4.01477, 99.9583, -0.912214, 99.9999, -0.0408196, 99.3348, 3.58631, 97.4003, 6.72575, 94.4595, 8.95061, 90.9122, 9.95832, 87.2409, 9.61186, 83.9448, 7.95834, 81.4721, 5.22262, 80.1591, 1.7767, 80.0417, 0.912246, 79.7775, -1.62344, 79.4379, -4.11047, 79.0212, -6.57766, 78.5281, -9.02274, 77.9596, -11.4434, 77.3168, -13.8373, 76.6008, -16.2021, 75.8128, -18.5357, 74.954, -20.8357, 74.0258, -23.1002, 73.0296, -25.3269, 71.9668, -27.514, 70.8388, -29.6593, 69.6473, -31.7612, 68.394, -33.8174, 67.0804, -35.8264, 65.7084, -37.7863, 64.2796, -39.6956, 62.796, -41.5524, 61.2594, -43.3554, 59.6716, -45.103, 58.0348, -46.7938, 56.3508, -48.4264, 54.6218, -49.9995, 52.8497, -51.512, 51.0367, -52.9626, 49.1849, -54.3504, 47.2964, -55.6743, 45.3735, -56.9334, 43.4183, -58.1268, 41.4331, -59.2537, 39.4201, -60.3135, 37.3816, -61.3056, 35.3198, -62.2292, 33.237, -63.0841, 31.1354, -63.8698, 29.0174, -64.5859, 26.8853, -65.2322, 24.7413, -65.8085, 22.5878, -66.3148, 20.4269, -66.7509, 18.2611, -67.117, 16.0923, -67.4131, 13.9233, -67.6395, 11.7558, -67.7963, 9.59228, -67.884, 7.43492, -67.903, 5.28592, -67.8536, 3.14737, -67.7365, 1.02141, -67.5523, -1.08987, -67.3016, -3.18433, -66.9852, -5.26009, -66.6039, -7.31494, -66.1585, -9.34708, -65.6501, -11.3545, -65.0795, -13.3353, -64.4478, -15.2877, -63.7562, -17.2098, -63.0058, -19.0999, -62.1978, -20.9563, -61.3335, -22.7773, -60.4142, -24.5614, -59.4412, -26.3069, -58.416, -28.0123, -57.3401, -29.6761, -56.2149, -31.297, -55.0421, -32.8736, -53.8231, -34.4047, -52.5595, -35.8889, -51.2532, -37.3252, -49.9057, -38.7124, -48.5187, -40.0495, -47.094, -41.3353, -45.6335, -42.5691, -44.1388, -43.75, -42.6119, -44.8771, -41.0545, -45.9497, -39.4686, -46.9672, -37.856, -47.9288, -36.2186, -48.8342, -34.5582, -49.6828, -32.8769, -50.4741, -31.1766, -51.2078, -29.4592, -51.8837, -27.7265, -52.5015, -25.9806, -53.061, -24.2234, -53.5622, -22.4568, -54.005, -20.6827, -54.3894, -18.9032, -54.7155, -17.1199, -54.9835, -15.335, -55.1937, -13.5502, -55.3462, -11.7675, -55.4414, -9.98845, -55.4797, -8.21527, -55.4616, -6.44952, -55.3876, -4.69313, -55.2582, -2.9477, -55.0741, -1.2152, -54.8359, 0.502911, -54.5444, 2.20482, -54.2004, 3.88879, -53.8047, 5.5534, -53.3581, 7.197, -52.8616, 8.81803, -52.3162, 10.4149, -51.7229, 11.9864, -51.0828, 13.5309, -50.3969, 15.0469, -49.6665, 16.5334, -48.8927, 17.9887, -48.0767, 19.412, -47.2198, 20.8017, -46.3233, 22.1569, -45.3885, 23.4763, -44.4167, 24.759, -43.4094, 26.004, -42.368, 27.2101, -41.2939, 28.3766, -40.1885, 29.5026, -39.0534, 30.5873, -37.89, 31.63, -36.6999, 32.6299, -35.4846, 33.5863, -34.2455, 34.4988, -32.9844, 35.3668, -31.7028, 36.1897, -30.4023, 36.9672, -29.0843, 37.6989, -27.7507, 38.3845, -26.4027, 39.0236, -25.0423, 39.6162, -23.6708, 40.162, -22.2899, 40.661, -20.9012, 41.113, -19.5062, 41.5182, -18.1065, 41.8765, -16.7038, 42.1881, -15.2995, 42.4531, -13.8951, 42.6717, -12.4922, 42.8443, -11.0923, 42.971, -9.69686, 43.0524, -8.30734, 43.0888, -6.92522, 43.0806, -5.55191, 43.0283, -4.18884, 42.9325, -2.83722, 42.7939, -1.49857, 42.6129, -0.174246, 42.3904, 1.1347, 42.127, 2.42688, 41.8234, 3.70101, 41.4805, 4.95597, 41.0991, 6.19068, 40.6801, 7.4039, 40.2243, 8.59459, 39.7328, 9.76174, 39.2064, 10.9042, 38.6462, 12.0213, 38.0531, 13.1118, 37.4283, 14.175, 36.7729, 15.21, 36.0878, 16.216, 35.3743, 17.1923, 34.6334, 18.1381, 33.8664, 19.0526, 33.0745, 19.9355, 32.2588, 20.786, 31.4205, 21.6037, 30.5609, 22.3878, 29.6812, 23.1383, 28.7826, 23.8544, 27.8665, 24.536, 26.934, 25.1827, 25.9865, 25.7942, 25.0252, 26.3703, 24.0513, 26.9108, 23.0662, 27.4157, 22.071, 27.8847, 21.0672, 28.3179, 20.056, 28.7154, 19.0385, 29.077, 18.0161, 29.4029, 16.9899, 29.6932, 15.9613, 29.9482, 14.9315, 30.168, 13.9015, 30.3528, 12.8727, 30.5031, 11.8462, 30.619, 10.8231, 30.701, 9.80471, 30.7495, 8.79185, 30.7649, 7.78588, 30.7478, 6.78777, 30.6985, 5.79856, 30.6177, 4.81939, 30.506, 3.85114, 30.3639, 2.89468, 30.1859, 1.9192)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_5hqd2")
ShaderHandler = SubResource("Resource_obuyd")
polygonQuality = 200
shaderQuality = 300
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0
