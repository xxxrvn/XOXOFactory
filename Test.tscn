[gd_scene load_steps=31 format=3 uid="uid://rc7owpla7mgs"]

[ext_resource type="Script" path="res://Test.gd" id="1_67fru"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathShaderHandler.gd" id="2_0lgfn"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathDrawable.gd" id="2_f3cgx"]
[ext_resource type="Script" path="res://addons/FancyXoXo/CustomCombiEffects/EasyCCE.gd" id="3_emmth"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/SpiralHandler.gd" id="7_ovrq5"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/FactorPoint.gd" id="8_kn80v"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/PolyFactorBezierHandler.gd" id="9_cqkuq"]

[sub_resource type="Shader" id="Shader_epjel"]
code = "shader_type canvas_item;
 uniform vec2 positions[101];
 uniform vec2 norms[101];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 101-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==101-1){
				float d1=length(positions[101-1]-positions[101-2]);
				float d2=length(uv-positions[101-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(101+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3y8sm"]
shader = SubResource("Shader_epjel")
shader_parameter/positions = PackedVector2Array(100, 100, 102, 102.03, 104, 104.117, 106, 106.259, 108, 108.455, 110, 110.701, 112, 112.996, 114, 115.338, 116, 117.723, 118, 120.152, 120, 122.62, 122, 125.127, 124, 127.67, 126, 130.248, 128, 132.859, 130, 135.501, 132, 138.173, 134, 140.872, 136, 143.597, 138, 146.347, 140, 149.12, 142, 151.915, 144, 154.729, 146, 157.563, 148, 160.414, 150, 163.281, 152, 166.164, 154, 169.06, 156, 171.969, 158, 174.889, 160, 177.82, 162, 180.761, 164, 183.71, 166, 186.667, 168, 189.631, 170, 192.601, 172, 195.577, 174, 198.557, 176, 201.541, 178, 204.529, 180, 207.52, 182, 210.513, 184, 213.508, 186, 216.505, 188, 219.503, 190, 222.501, 192, 225.501, 194, 228.5, 196, 231.5, 198, 234.5, 200, 237.5, 202, 240.5, 204, 243.5, 206, 246.5, 208, 249.501, 210, 252.501, 212, 255.503, 214, 258.505, 216, 261.508, 218, 264.513, 220, 267.52, 222, 270.529, 224, 273.541, 226, 276.557, 228, 279.577, 230, 282.601, 232, 285.631, 234, 288.667, 236, 291.71, 238, 294.761, 240, 297.82, 242, 300.889, 244, 303.969, 246, 307.06, 248, 310.164, 250, 313.281, 252, 316.414, 254, 319.563, 256, 322.729, 258, 325.915, 260, 329.12, 262, 332.347, 264, 335.597, 266, 338.872, 268, 342.173, 270, 345.501, 272, 348.859, 274, 352.248, 276, 355.67, 278, 359.127, 280, 362.62, 282, 366.152, 284, 369.723, 286, 373.338, 288, 376.996, 290, 380.701, 292, 384.455, 294, 388.259, 296, 392.117, 298, 396.03, 300, 400)
shader_parameter/norms = PackedVector2Array(0.707646, -0.706568, 0.717272, -0.696793, 0.726631, -0.687028, 0.735231, -0.677817, 0.743155, -0.669119, 0.750456, -0.660921, 0.757192, -0.653193, 0.763418, -0.645905, 0.769172, -0.639041, 0.774486, -0.632591, 0.7794, -0.626527, 0.783928, -0.620852, 0.788145, -0.61549, 0.792019, -0.610496, 0.795614, -0.605804, 0.798969, -0.601372, 0.802038, -0.597273, 0.804858, -0.593468, 0.807492, -0.589879, 0.809903, -0.586563, 0.812149, -0.583451, 0.814221, -0.580555, 0.816092, -0.577922, 0.817829, -0.575461, 0.819448, -0.573154, 0.820905, -0.571065, 0.822231, -0.569155, 0.823445, -0.567397, 0.824564, -0.565768, 0.825549, -0.56433, 0.826468, -0.562984, 0.827266, -0.561811, 0.828011, -0.560712, 0.828648, -0.55977, 0.829212, -0.558934, 0.829737, -0.558155, 0.830171, -0.557509, 0.83055, -0.556944, 0.830853, -0.556492, 0.831145, -0.556055, 0.831394, -0.555683, 0.831561, -0.555434, 0.831711, -0.555208, 0.831812, -0.555057, 0.831881, -0.554954, 0.831959, -0.554837, 0.832014, -0.554754, 0.832044, -0.55471, 0.83205, -0.5547, 0.832037, -0.55472, 0.832063, -0.554681, 0.83206, -0.554686, 0.832054, -0.554695, 0.832067, -0.554676, 0.832093, -0.554637, 0.832161, -0.554534, 0.832216, -0.554451, 0.832307, -0.554315, 0.832405, -0.554168, 0.832544, -0.553959, 0.832732, -0.553676, 0.832949, -0.55335, 0.833236, -0.552917, 0.833539, -0.552461, 0.833944, -0.55185, 0.834343, -0.551245, 0.834809, -0.55054, 0.835387, -0.549662, 0.835981, -0.548758, 0.83667, -0.547708, 0.837391, -0.546604, 0.838219, -0.545333, 0.839088, -0.543996, 0.840073, -0.542474, 0.841169, -0.540772, 0.842263, -0.539066, 0.843513, -0.537109, 0.844753, -0.535156, 0.846125, -0.532985, 0.84763, -0.530588, 0.849207, -0.52806, 0.850847, -0.525414, 0.852531, -0.522677, 0.854342, -0.519712, 0.856186, -0.516668, 0.858142, -0.513413, 0.860211, -0.509939, 0.862313, -0.506375, 0.864439, -0.502738, 0.866679, -0.498867, 0.868986, -0.494837, 0.8713, -0.490752, 0.873707, -0.486453, 0.876224, -0.481905, 0.878731, -0.477318, 0.881273, -0.472607, 0.883846, -0.467778, 0.886429, -0.462864, 0.889064, -0.457783, 0.891767, -0.452495, 0.894304, -0.447459)
shader_parameter/time = 1.83159
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_h5t7d"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_0k4rs"]
gradient = SubResource("Gradient_h5t7d")

[sub_resource type="Resource" id="Resource_wafln"]
script = ExtResource("8_kn80v")
p = Vector2(100, 100)
f = 1.0

[sub_resource type="Resource" id="Resource_jxwkk"]
script = ExtResource("8_kn80v")
p = Vector2(150, 150)
f = 1.0

[sub_resource type="Resource" id="Resource_p5iyy"]
script = ExtResource("8_kn80v")
p = Vector2(200, 250)
f = 1.0

[sub_resource type="Resource" id="Resource_r4yw1"]
script = ExtResource("8_kn80v")
p = Vector2(250, 300)
f = 1.0

[sub_resource type="Resource" id="Resource_lhfgx"]
script = ExtResource("8_kn80v")
p = Vector2(300, 400)
f = 1.0

[sub_resource type="Resource" id="Resource_g6o6w"]
script = ExtResource("9_cqkuq")
Points = Array[ExtResource("8_kn80v")]([SubResource("Resource_wafln"), SubResource("Resource_jxwkk"), SubResource("Resource_p5iyy"), SubResource("Resource_r4yw1"), SubResource("Resource_lhfgx")])
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_hldsy"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_4wnyg"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_eklyd"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_g5yct"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP"
DeleteShaderFile = false
shaderQuality = 100
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_hldsy")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_4wnyg")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_eklyd")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[sub_resource type="Shader" id="Shader_gsddb"]
code = "shader_type canvas_item;
 uniform vec2 positions[301];
 uniform vec2 norms[301];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 301-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==301-1){
				float d1=length(positions[301-1]-positions[301-2]);
				float d2=length(uv-positions[301-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(301+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sbjrf"]
shader = SubResource("Shader_gsddb")
shader_parameter/positions = PackedVector2Array(40, 0, 40.2301, 1.26428, 40.4201, 2.54302, 40.5691, 3.83491, 40.6767, 5.13866, 40.7421, 6.45292, 40.7649, 7.77632, 40.7445, 9.10748, 40.6805, 10.445, 40.5724, 11.7874, 40.4199, 13.1332, 40.2227, 14.481, 39.9804, 15.8294, 39.6929, 17.1766, 39.36, 18.5214, 38.9815, 19.8621, 38.5575, 21.1972, 38.0878, 22.5251, 37.5726, 23.8443, 37.0119, 25.1532, 36.4058, 26.4503, 35.7545, 27.734, 35.0584, 29.0028, 34.3176, 30.255, 33.5326, 31.4892, 32.7037, 32.7037, 31.8314, 33.897, 30.9163, 35.0677, 29.9589, 36.2141, 28.9599, 37.3348, 27.9198, 38.4283, 26.8395, 39.4931, 25.7197, 40.5277, 24.5613, 41.5308, 23.3651, 42.5009, 22.132, 43.4366, 20.8632, 44.3365, 19.5595, 45.1994, 18.2222, 46.0239, 16.8522, 46.8088, 15.4508, 47.5528, 14.0193, 48.2548, 12.5588, 48.9134, 11.0708, 49.5278, 9.55645, 50.0966, 8.01727, 50.619, 6.45466, 51.0939, 4.8701, 51.5203, 3.26511, 51.8974, 1.64121, 52.2242, -2.29485e-06, 52.5, -1.65692, 52.724, -3.32789, 52.8954, -5.01127, 53.0137, -6.70533, 53.0781, -8.40835, 53.0882, -10.1186, 53.0435, -11.8343, 52.9435, -13.5536, 52.7878, -15.2748, 52.5761, -16.9959, 52.3081, -18.7153, 51.9837, -20.4309, 51.6026, -22.141, 51.1648, -23.8436, 50.6703, -25.537, 50.1191, -27.2191, 49.5113, -28.8881, 48.8471, -30.5421, 48.1267, -32.1793, 47.3504, -33.7976, 46.5185, -35.3954, 45.6315, -36.9706, 44.6898, -38.5214, 43.694, -40.046, 42.6447, -41.5425, 41.5425, -43.0091, 40.3883, -44.4441, 39.1827, -45.8455, 37.9267, -47.2118, 36.6212, -48.541, 35.2671, -49.8316, 33.8655, -51.0818, 32.4175, -52.2901, 30.9243, -53.4547, 29.387, -54.5741, 27.8069, -55.6469, 26.1854, -56.6713, 24.5239, -57.6461, 22.8237, -58.5698, 21.0864, -59.441, 19.3136, -60.2584, 17.5067, -61.0207, 15.6675, -61.7267, 13.7976, -62.3752, 11.8987, -62.9651, 9.9727, -63.4953, 8.02133, -63.9649, 6.04646, -64.3727, 4.04998, -64.718, 2.03384, -65, -5.68248e-06, -65.2178, -2.04956, -65.3708, -4.11279, -65.4582, -6.18761, -65.4796, -8.27199, -65.4344, -10.3638, -65.3221, -12.4609, -65.1424, -14.5611, -64.8951, -16.6622, -64.5798, -18.7621, -64.1963, -20.8586, -63.7447, -22.9495, -63.2248, -25.0325, -62.6367, -27.1053, -61.9807, -29.1659, -61.2567, -31.2119, -60.4652, -33.241, -59.6064, -35.2511, -58.6808, -37.24, -57.6889, -39.2053, -56.6312, -41.145, -55.5084, -43.0567, -54.3212, -44.9384, -53.0704, -46.7878, -51.7568, -48.6028, -50.3814, -50.3814, -48.9451, -52.1213, -47.4491, -53.8205, -45.8945, -55.477, -44.2825, -57.0887, -42.6144, -58.6537, -40.8916, -60.1701, -39.1154, -61.6359, -37.2873, -63.0493, -35.4089, -64.4085, -33.4818, -65.7117, -31.5077, -66.9572, -29.4882, -68.1433, -27.4253, -69.2683, -25.3207, -70.3308, -23.1763, -71.3292, -20.9941, -72.2621, -18.7761, -73.128, -16.5244, -73.9257, -14.241, -74.6538, -11.9281, -75.3112, -9.588, -75.8968, -7.22282, -76.4094, -4.83487, -76.8481, -2.42648, -77.2119, 9.24178e-07, -77.5, 2.44219, -77.7116, 4.89766, -77.8461, 7.36398, -77.9027, 9.83866, -77.881, 12.3192, -77.7805, 14.8031, -77.6007, 17.2879, -77.3414, 19.7709, -77.0024, 22.2495, -76.5834, 24.7214, -76.0845, 27.1837, -75.5057, 29.634, -74.847, 32.0697, -74.1087, 34.4881, -73.291, 36.8867, -72.3943, 39.2629, -71.419, 41.6142, -70.3657, 43.9378, -69.2349, 46.2313, -68.0274, 48.4923, -66.7439, 50.718, -65.3853, 52.9062, -63.9526, 55.0542, -62.4468, 57.1597, -60.8689, 59.2202, -59.2202, 61.2334, -57.502, 63.1968, -55.7155, 65.1084, -53.8623, 66.9656, -51.9439, 68.7664, -49.9618, 70.5086, -47.9176, 72.19, -45.8132, 73.8086, -43.6503, 75.3624, -41.4308, 76.8493, -39.1567, 78.2675, -36.8299, 79.6152, -34.4526, 80.8906, -32.0268, 82.0919, -29.5549, 83.2174, -27.039, 84.2658, -24.4815, 85.2353, -21.8847, 86.1247, -19.2511, 86.9324, -16.5832, 87.6573, -13.8835, 88.2982, -11.1546, 88.8539, -8.39915, 89.3234, -5.61974, 89.7057, -2.8191, 90, 1.57361e-05, 90.2055, 2.83484, 90.3214, 5.68256, 90.3472, 8.54035, 90.2824, 11.4053, 90.1266, 14.2746, 89.8793, 17.1454, 89.5404, 20.0146, 89.1097, 22.8795, 88.5871, 25.7369, 87.9727, 28.5841, 87.2667, 31.4179, 86.4692, 34.2356, 85.5806, 37.034, 84.6013, 39.8104, 83.5319, 42.5616, 82.3728, 45.2848, 81.1249, 47.9771, 79.789, 50.6356, 78.3659, 53.2574, 76.8566, 55.8396, 75.2623, 58.3794, 73.584, 60.874, 71.8231, 63.3206, 69.981, 65.7165, 68.059, 68.059, 66.0588, 70.3455, 63.9819, 72.5732, 61.8301, 74.7398, 59.6052, 76.8426, 57.3091, 78.8792, 54.9436, 80.8471, 52.511, 82.7441, 50.0133, 84.5679, 47.4527, 86.3162, 44.8316, 87.9869, 42.1521, 89.5779, 39.4169, 91.0872, 36.6284, 92.5128, 33.7891, 93.8529, 30.9017, 95.1057, 27.9688, 96.2694, 24.9933, 97.3426, 21.978, 98.3236, 18.9255, 99.211, 15.839, 100.003, 12.7213, 100.7, 9.57554, 101.298, 6.40465, 101.799, 3.21177, 102.2, 1.42548e-05, 102.5, -3.22744, 102.699, -6.46741, 102.797, -9.71667, 102.792, -12.972, 102.684, -16.2301, 102.473, -19.4877, 102.158, -22.7415, 101.739, -25.9881, 101.217, -29.2244, 100.591, -32.4468, 99.8609, -35.6521, 99.0277, -38.8371, 98.0914, -41.9983, 97.0526, -45.1326, 95.9117, -48.2365, 94.6695, -51.3067, 93.3267, -54.3401, 91.8842, -57.3334, 90.3431, -60.2834, 88.7044, -63.1869, 86.9693, -66.0407, 85.1392, -68.8418, 83.2155, -71.587, 81.1995, -74.2733, 79.0931, -76.8978, 76.8979, -79.4576, 74.6157, -81.9496, 72.2483, -84.3712, 69.7979, -86.7195, 67.2666, -88.9919, 64.6564, -91.1856, 61.9697, -93.2982, 59.2089, -95.3272, 56.3764, -97.27, 53.4747, -99.1245, 50.5065, -100.888, 47.4744, -102.559, 44.3813, -104.135, 41.23, -105.614, 38.0233, -106.994, 34.7644, -108.273, 31.4563, -109.45, 28.102, -110.523, 24.7047, -111.49, 21.2678, -112.35, 17.7944, -113.101, 14.288, -113.743, 10.7519, -114.274, 7.18951, -114.693, 3.60438, -115, -2.74272e-06)
shader_parameter/norms = PackedVector2Array(0.981411, -0.19192, 0.986619, -0.16304, 0.991407, -0.130813, 0.995142, -0.0984475, 0.99782, -0.0659899, 0.999439, -0.033485, 1, -0.000955466, 0.999502, 0.0315626, 0.997948, 0.0640265, 0.99534, 0.0964299, 0.991683, 0.128704, 0.986981, 0.160836, 0.981242, 0.192781, 0.974471, 0.224514, 0.966674, 0.256009, 0.957865, 0.287218, 0.948054, 0.318109, 0.937248, 0.348663, 0.925466, 0.378831, 0.912714, 0.4086, 0.899007, 0.437934, 0.884369, 0.466788, 0.868809, 0.495148, 0.852341, 0.522986, 0.834988, 0.550269, 0.816768, 0.576967, 0.797702, 0.603052, 0.777804, 0.628506, 0.757108, 0.65329, 0.735619, 0.677396, 0.71338, 0.700777, 0.690395, 0.723433, 0.666704, 0.745323, 0.642319, 0.766438, 0.617278, 0.786745, 0.591607, 0.806226, 0.565319, 0.824872, 0.538452, 0.842656, 0.511037, 0.859559, 0.483093, 0.875569, 0.454661, 0.890665, 0.425756, 0.904838, 0.396426, 0.918067, 0.366687, 0.930344, 0.336577, 0.941656, 0.30613, 0.95199, 0.275365, 0.96134, 0.244323, 0.969694, 0.213041, 0.977043, 0.181546, 0.983383, 0.149857, 0.988708, 0.11803, 0.99301, 0.0860948, 0.996287, 0.0540645, 0.998537, 0.0219894, 0.999758, -0.010101, 0.999949, -0.0421732, 0.99911, -0.0741941, 0.997244, -0.106137, 0.994352, -0.137968, 0.990437, -0.169648, 0.985505, -0.20115, 0.97956, -0.232439, 0.972611, -0.263483, 0.964664, -0.294246, 0.95573, -0.324711, 0.945813, -0.354825, 0.934933, -0.38458, 0.923092, -0.413939, 0.910305, -0.442862, 0.89659, -0.471331, 0.881957, -0.499309, 0.866424, -0.526779, 0.850002, -0.553701, 0.832715, -0.580048, 0.814582, -0.605797, 0.795619, -0.630929, 0.775841, -0.655411, 0.755273, -0.679217, 0.733938, -0.702324, 0.711857, -0.724712, 0.689052, -0.746361, 0.665541, -0.767245, 0.641354, -0.787336, 0.616524, -0.806624, 0.591065, -0.825088, 0.565005, -0.842709, 0.538369, -0.859466, 0.511192, -0.875345, 0.483499, -0.890334, 0.455307, -0.90441, 0.426664, -0.917566, 0.397584, -0.929783, 0.368108, -0.941052, 0.338262, -0.951364, 0.308069, -0.960705, 0.27757, -0.969068, 0.246792, -0.976445, 0.215767, -0.98283, 0.184516, -0.988212, 0.153093, -0.992589, 0.121519, -0.995959, 0.0898138, -0.998315, 0.0580343, -0.999657, 0.0261904, -0.999984, -0.0056715, -0.999295, -0.0375329, -0.997593, -0.0693394, -0.994878, -0.101083, -0.991154, -0.132718, -0.986424, -0.164221, -0.980695, -0.195546, -0.97397, -0.226675, -0.966261, -0.257563, -0.957572, -0.288194, -0.947914, -0.318526, -0.937297, -0.348531, -0.925732, -0.37818, -0.913228, -0.407448, -0.8998, -0.436302, -0.885464, -0.464707, -0.870234, -0.492639, -0.854121, -0.520074, -0.837147, -0.546979, -0.819325, -0.573329, -0.800679, -0.599094, -0.781224, -0.624251, -0.760982, -0.648773, -0.739965, -0.672645, -0.71821, -0.695827, -0.695728, -0.718306, -0.672547, -0.740054, -0.648683, -0.761059, -0.624173, -0.781286, -0.599031, -0.800726, -0.57328, -0.819359, -0.546955, -0.837162, -0.520083, -0.854116, -0.492683, -0.870209, -0.464801, -0.885415, -0.436433, -0.899737, -0.407633, -0.913146, -0.378428, -0.925631, -0.34884, -0.937182, -0.318903, -0.947787, -0.288651, -0.957434, -0.258105, -0.966117, -0.227306, -0.973823, -0.196273, -0.980549, -0.165055, -0.986284, -0.133661, -0.991027, -0.102141, -0.99477, -0.0705185, -0.99751, -0.0388255, -0.999246, -0.00709371, -0.999975, 0.0246382, -0.999696, 0.0563393, -0.998412, 0.0879872, -0.996122, 0.119552, -0.992828, 0.15098, -0.988537, 0.182267, -0.983249, 0.213361, -0.976973, 0.244241, -0.969715, 0.274877, -0.961479, 0.30523, -0.952279, 0.33527, -0.942122, 0.364977, -0.931016, 0.394313, -0.918976, 0.423259, -0.906009, 0.451765, -0.892137, 0.479823, -0.877365, 0.507395, -0.861713, 0.534454, -0.845198, 0.560977, -0.827831, 0.586933, -0.809636, 0.612302, -0.790624, 0.637049, -0.770823, 0.661159, -0.750246, 0.684604, -0.728916, 0.707359, -0.706855, 0.729398, -0.68409, 0.750703, -0.660639, 0.771262, -0.636518, 0.791043, -0.611761, 0.810023, -0.586398, 0.828193, -0.560443, 0.84553, -0.533928, 0.86202, -0.506875, 0.877638, -0.479324, 0.892379, -0.451287, 0.906224, -0.422798, 0.919162, -0.39388, 0.931174, -0.364576, 0.942252, -0.334904, 0.952383, -0.304904, 0.96156, -0.274595, 0.969772, -0.244011, 0.977011, -0.213191, 0.983271, -0.182149, 0.988545, -0.150927, 0.992826, -0.119566, 0.996114, -0.088077, 0.998403, -0.0564993, 0.999691, -0.0248741, 0.999977, 0.0067847, 0.999261, 0.0384304, 0.997545, 0.07003, 0.994829, 0.101564, 0.991116, 0.133, 0.986411, 0.164299, 0.980719, 0.195423, 0.974042, 0.226367, 0.966393, 0.257068, 0.957777, 0.287514, 0.9482, 0.317674, 0.937674, 0.347517, 0.92621, 0.377009, 0.913819, 0.406121, 0.900516, 0.434822, 0.886314, 0.463085, 0.871221, 0.49089, 0.855256, 0.518206, 0.838436, 0.545, 0.820782, 0.571241, 0.802306, 0.596912, 0.783024, 0.621992, 0.762964, 0.646441, 0.742139, 0.670246, 0.720572, 0.69338, 0.69829, 0.715815, 0.675302, 0.737542, 0.651651, 0.758519, 0.627339, 0.778746, 0.602406, 0.79819, 0.576865, 0.81684, 0.550758, 0.834665, 0.524097, 0.851659, 0.496908, 0.867803, 0.469228, 0.883077, 0.44108, 0.897468, 0.412492, 0.910961, 0.383482, 0.923548, 0.354102, 0.935207, 0.324372, 0.94593, 0.29431, 0.95571, 0.263957, 0.964534, 0.233342, 0.972395, 0.2025, 0.979282, 0.171452, 0.985192, 0.140229, 0.990119, 0.108874, 0.994056, 0.0774018, 0.997, 0.0458563, 0.998948, 0.0142691, 0.999898, -0.0173244, 0.99985, -0.0489123, 0.998803, -0.0804422, 0.996759, -0.111897, 0.99372, -0.143237, 0.989688, -0.174428, 0.98467, -0.205452, 0.978667, -0.236262, 0.971689, -0.26684, 0.963741, -0.297153, 0.95483, -0.327163, 0.944968, -0.356853, 0.934161, -0.386179, 0.922424, -0.415123, 0.909765, -0.443653, 0.896199, -0.471736, 0.88174, -0.499346, 0.866403, -0.526456, 0.850202, -0.553044, 0.833152, -0.579085, 0.815267, -0.604544, 0.796572, -0.629395, 0.777086, -0.653621, 0.756822, -0.67719, 0.735808, -0.700092, 0.714053, -0.722286, 0.691595, -0.74376, 0.668447, -0.764499, 0.644625, -0.78447, 0.620167, -0.803662, 0.595086, -0.82205, 0.569415, -0.839611, 0.543188, -0.856346, 0.516402, -0.872223, 0.489109, -0.887228, 0.461332, -0.90135, 0.433092, -0.914574, 0.404419, -0.926882, 0.375353, -0.938267, 0.345912, -0.948719, 0.316122, -0.958224, 0.286017, -0.966776, 0.255624, -0.974362, 0.224986, -0.980978, 0.19412, -0.986616, 0.16306, -0.991271, 0.131838, -0.994939, 0.100483, -0.997391, 0.0721855)
shader_parameter/time = 1.83159
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_3pgqb"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_hxe0o"]
gradient = SubResource("Gradient_3pgqb")

[sub_resource type="Resource" id="Resource_5hqd2"]
script = ExtResource("7_ovrq5")
standartX = 40.0
standartY = 40.0
variantX = 50.0
variantY = 50.0
pseudoX = 1.0
pseudoY = 1.0
powerX = 1.0
powerY = 1.0
adjustX = 0.0
adjustY = 0.0
length = 1.5
logarythmic = true
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_uod5l"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_upp4r"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_ivaai"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_obuyd"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP2"
DeleteShaderFile = false
shaderQuality = 300
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_uod5l")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_upp4r")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_ivaai")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[node name="Test" type="Node2D"]
script = ExtResource("1_67fru")

[node name="WPDTest" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_3y8sm")
texture = SubResource("GradientTexture2D_0k4rs")
polygon = PackedVector2Array(92.3347, 106.422, 90.5283, 103.207, 90.0099, 99.5562, 90.85, 95.9656, 92.9343, 92.9235, 95.9795, 90.8438, 99.5714, 90.0092, 103.222, 90.5331, 106.434, 92.3445, 107.076, 92.9343, 113.613, 99.7639, 120.088, 107.064, 126.514, 114.77, 132.901, 122.826, 139.259, 131.179, 145.593, 139.784, 151.909, 148.594, 158.209, 157.571, 164.497, 166.677, 170.775, 175.882, 177.044, 185.158, 183.307, 194.482, 189.565, 203.835, 195.819, 213.204, 202.07, 222.578, 208.321, 231.953, 214.571, 241.328, 220.822, 250.709, 227.076, 260.102, 233.334, 269.522, 239.596, 278.986, 245.865, 288.517, 252.14, 298.142, 258.423, 307.891, 264.714, 317.801, 271.013, 327.91, 277.32, 338.264, 283.634, 348.91, 289.954, 359.899, 296.281, 371.293, 302.611, 383.147, 308.943, 395.525, 309.299, 396.322, 310, 399.942, 309.341, 403.571, 307.412, 406.713, 304.475, 408.943, 300.929, 409.957, 297.257, 409.616, 293.958, 407.969, 291.481, 405.237, 291.057, 404.475, 284.889, 392.415, 278.719, 380.861, 272.546, 369.746, 266.366, 359, 260.18, 348.571, 253.987, 338.405, 247.786, 328.452, 241.577, 318.672, 235.36, 309.024, 229.135, 299.477, 222.904, 290.002, 216.666, 280.576, 210.424, 271.179, 204.178, 261.797, 197.929, 252.422, 191.679, 243.047, 185.43, 233.672, 179.181, 224.302, 172.935, 214.946, 166.693, 205.616, 160.456, 196.33, 154.225, 187.112, 148.003, 177.989, 141.791, 168.992, 135.591, 160.159, 129.407, 151.531, 123.241, 143.156, 117.099, 135.085, 110.986, 127.375, 104.912, 120.09, 98.8875, 113.298, 92.9235, 107.066)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_g6o6w")
ShaderHandler = SubResource("Resource_g5yct")
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0

[node name="WPDTest2" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_sbjrf")
position = Vector2(501, 431)
texture = SubResource("GradientTexture2D_hxe0o")
polygon = PackedVector2Array(30.056, 1.05655, 30.3492, -2.61939, 31.9547, -5.93912, 34.6543, -8.45123, 38.0808, -9.81411, 41.7683, -9.84242, 45.2153, -8.53231, 47.9532, -6.06195, 49.6095, -2.76726, 49.8141, -1.9192, 50.2216, 0.432476, 50.5206, 2.85044, 50.7023, 5.29712, 50.7649, 7.76677, 50.7066, 10.2536, 50.5258, 12.7517, 50.2215, 15.2548, 49.7928, 17.7572, 49.2391, 20.2524, 48.5602, 22.7343, 47.7561, 25.1964, 46.8273, 27.6326, 45.7743, 30.0365, 44.5982, 32.4019, 43.3004, 34.7224, 41.8824, 36.9919, 40.3464, 39.204, 38.6944, 41.3528, 36.9291, 43.4321, 35.0536, 45.4361, 33.0709, 47.359, 30.9844, 49.1952, 28.7983, 50.939, 26.5164, 52.5853, 24.1431, 54.1288, 21.6831, 55.5645, 19.1414, 56.8878, 16.5231, 58.0941, 13.8336, 59.1792, 11.0786, 60.1389, 8.26386, 60.9696, 5.39551, 61.6678, 2.47992, 62.2303, -0.47662, 62.6541, -3.46723, 62.9366, -6.48543, 63.0757, -9.52405, 63.0694, -12.5762, 62.9159, -15.6347, 62.6142, -18.6924, 62.1632, -21.7419, 61.5623, -24.7758, 60.8115, -27.7868, 59.9107, -30.7673, 58.8607, -33.7102, 57.6621, -36.6079, 56.3163, -39.4531, 54.8248, -42.2384, 53.1898, -44.9566, 51.4135, -47.6005, 49.4987, -50.1632, 47.4484, -52.6377, 45.2661, -55.0173, 42.9556, -57.2952, 40.5209, -59.4652, 37.9667, -61.5209, 35.2976, -63.4565, 32.5189, -65.266, 29.6358, -66.944, 26.6542, -68.4851, 23.5802, -69.8845, 20.42, -71.1373, 17.1802, -72.2392, 13.8675, -73.186, 10.4892, -73.9742, 7.05243, -74.6002, 3.56477, -75.061, 0.0338358, -75.3539, -3.53244, -75.4767, -7.12617, -75.4273, -10.7391, -75.2043, -14.363, -74.8066, -17.9894, -74.2334, -21.61, -73.4844, -25.2162, -72.5597, -28.7994, -71.4598, -32.3511, -70.1857, -35.8627, -68.7387, -39.3256, -67.1205, -42.7313, -65.3335, -46.0714, -63.3802, -49.3374, -61.2636, -52.5211, -58.9872, -55.6143, -56.5549, -58.609, -53.9709, -61.4974, -51.2398, -64.2718, -48.3668, -66.9246, -45.3571, -69.4488, -42.2166, -71.8373, -38.9514, -74.0834, -35.568, -76.1804, -32.0733, -78.1225, -28.4741, -79.9037, -24.7784, -81.5184, -20.9935, -82.9615, -17.1275, -84.2282, -13.1887, -85.314, -9.18554, -86.2149, -5.12688, -86.9272, -1.02141, -87.4477, 3.12156, -87.7736, 7.29304, -87.9025, 11.4833, -87.8324, 15.683, -87.5619, 19.8825, -87.0899, 24.0722, -86.4159, 28.2422, -85.5398, 32.3828, -84.4618, 36.484, -83.183, 40.5365, -81.7044, 44.5302, -80.0281, 48.4554, -78.1563, 52.3028, -76.0916, 56.0626, -73.8373, 59.7257, -71.3971, 63.2827, -68.7751, 66.7247, -65.976, 70.0429, -63.0047, 73.2286, -59.8668, 76.2735, -56.5681, 79.1696, -53.115, 81.9089, -49.5143, 84.484, -45.773, 86.8877, -41.8987, 89.1132, -37.8992, 91.1541, -33.7829, 93.0042, -29.5581, 94.6578, -25.2337, 96.1097, -20.8192, 97.3551, -16.3237, 98.3894, -11.757, 99.2088, -7.129, 99.8099, -2.45005, 100.189, 2.26985, 100.345, 7.01988, 100.275, 11.7896, 99.9775, 16.5682, 99.4515, 21.3446, 98.6967, 26.1082, 97.7132, 30.8477, 96.5014, 35.5523, 95.0626, 40.2108, 93.3984, 44.8123, 91.511, 49.346, 89.4032, 53.8009, 87.0781, 58.1663, 84.5395, 62.4317, 81.7918, 66.5864, 78.8398, 70.6203, 75.6887, 74.5234, 72.3443, 78.2858, 68.813, 81.8979, 65.1015, 85.3505, 61.217, 88.6346, 57.1673, 91.7415, 52.9603, 94.6629, 48.6046, 97.3909, 44.1092, 99.9179, 39.4833, 102.237, 34.7365, 104.341, 29.879, 106.224, 24.9211, 107.881, 19.8732, 109.305, 14.7463, 110.492, 9.55164, 111.439, 4.3005, 112.14, -0.995585, 112.593, -6.32472, 112.796, -11.675, 112.745, -17.0345, 112.44, -22.391, 111.88, -27.7324, 111.064, -33.0463, 109.992, -38.3205, 108.665, -43.5429, 107.085, -48.7011, 105.253, -53.783, 103.173, -58.7767, 100.846, -63.67, 98.2777, -68.4514, 95.4714, -73.1095, 92.432, -77.6324, 89.1653, -82.0094, 85.677, -86.2295, 81.9737, -90.2822, 78.0625, -94.1571, 73.951, -97.8446, 69.6472, -101.335, 65.1597, -104.619, 60.4977, -107.688, 55.6705, -110.534, 50.6881, -113.148, 45.5609, -115.525, 40.2995, -117.656, 34.9154, -119.535, 29.4196, -121.157, 23.824, -122.517, 18.1409, -123.609, 12.3825, -124.43, 6.56138, -124.974, 0.721852, -124.999, -0.150179, -124.265, -3.76394, -122.27, -6.86586, -119.288, -9.03414, -115.722, -9.97392, -112.058, -9.55739, -108.794, -7.84122, -106.374, -5.05876, -105.127, -1.58839, -105.026, -0.721857, -104.565, 4.23777, -103.877, 9.12128, -102.961, 13.9494, -101.822, 18.7115, -100.463, 23.3975, -98.8904, 27.9971, -97.1079, 32.5009, -95.1215, 36.899, -92.937, 41.1825, -90.561, 45.3424, -88.0002, 49.3703, -85.2616, 53.258, -82.3529, 56.9978, -79.2819, 60.5821, -76.0566, 64.0043, -72.6857, 67.2576, -69.1776, 70.336, -65.5415, 73.2338, -61.7866, 75.9459, -57.9223, 78.4673, -53.9581, 80.7941, -49.9036, 82.9222, -45.769, 84.8485, -41.564, 86.5701, -37.2989, 88.0846, -32.9837, 89.3903, -28.6287, 90.4858, -24.2439, 91.3702, -19.8395, 92.0433, -15.4257, 92.5051, -11.0126, 92.7562, -6.6101, 92.7978, -2.22831, 92.6313, 2.12303, 92.259, 6.43443, 91.6832, 10.6963, 90.9068, 14.8995, 89.9333, 19.0349, 88.7665, 23.0934, 87.4106, 27.0669, 85.8702, 30.9465, 84.1503, 34.7246, 82.2564, 38.3933, 80.1941, 41.9451, 77.9696, 45.3731, 75.5892, 48.6702, 73.0597, 51.8303, 70.3881, 54.8472, 67.5816, 57.7153, 64.6479, 60.4294, 61.5946, 62.9845, 58.4298, 65.3762, 55.1616, 67.6005, 51.7983, 69.6537, 48.3485, 71.5327, 44.8207, 73.2346, 41.2236, 74.7572, 37.5662, 76.0986, 33.8573, 77.2573, 30.1057, 78.2323, 26.3204, 79.023, 22.5104, 79.6292, 18.6846, 80.0513, 14.8518, 80.2898, 11.021, 80.346, 7.20087, 80.2214, 3.39983, 79.918, -0.37331, 79.4379, -4.11047, 78.7841, -7.8031, 77.9596, -11.4434, 76.9679, -15.0235, 75.8128, -18.5357, 74.4985, -21.9725, 73.0296, -25.3269, 71.4108, -28.592, 69.6473, -31.7612, 67.7447, -34.8279, 65.7084, -37.7863, 63.5445, -40.6306, 61.2594, -43.3554, 58.8592, -45.9556, 56.3508, -48.4264, 53.7409, -50.7634, 51.0367, -52.9626, 48.2451, -55.0204, 45.3735, -56.9334, 42.4293, -58.6986, 39.4201, -60.3135, 36.3535, -61.776, 33.237, -63.0841, 30.0784, -64.2365, 26.8853, -65.2322, 23.6656, -66.0704, 20.4269, -66.7509, 17.1769, -67.2738, 13.9233, -67.6395, 10.6734, -67.8488, 7.43492, -67.903, 4.21527, -67.8035, 1.02141, -67.5523, -2.13929, -67.1516, -5.26009, -66.6039, -8.33398, -65.9121, -11.3545, -65.0795, -14.3151, -64.1095, -17.2098, -63.0058, -20.0325, -61.7726, -22.7773, -60.4142, -25.439, -58.9351, -28.0123, -57.3401, -30.492, -55.6344, -32.8736, -53.8231, -35.1528, -51.9116, -37.3252, -49.9057, -39.3872, -47.811, -41.3353, -45.6335, -43.1662, -43.3793, -44.8771, -41.0545, -46.4654, -38.6655, -47.9288, -36.2186, -49.2656, -33.7201, -50.4741, -31.1766, -51.553, -28.5946, -52.5015, -25.9806, -53.3189, -23.3412, -54.005, -20.6827, -54.5597, -18.0119, -54.9835, -15.335, -55.2771, -12.6584, -55.4414, -9.98845, -55.4777, -7.33131, -55.3876, -4.69313, -55.173, -2.07973, -54.8359, 0.502911, -54.3789, 3.04917, -53.8047, 5.5534, -53.116, 8.01045, -52.3162, 10.4149, -51.4086, 12.762, -50.3969, 15.0469, -49.2849, 17.265, -48.0767, 19.412, -46.7764, 21.4837, -45.3885, 23.4763, -43.9174, 25.3863, -42.368, 27.2101, -40.745, 28.9448, -39.0534, 30.5873, -37.2982, 32.1353, -35.4846, 33.5863, -33.6176, 34.9384, -31.7028, 36.1897, -29.7454, 37.3388, -27.7507, 38.3845, -25.724, 39.3258, -23.6708, 40.162, -21.5964, 40.8929, -19.5062, 41.5182, -17.4055, 42.0381, -15.2995, 42.4531, -13.1934, 42.7637, -11.0923, 42.971, -9.00131, 43.0762, -6.92522, 43.0806, -4.86904, 42.9858, -2.83722, 42.7939, -0.834581, 42.5068, 1.1347, 42.127, 3.06621, 41.6568, 4.95597, 41.0991, 6.80003, 40.4567, 8.59459, 39.7328, 10.3362, 38.9304, 12.0213, 38.0531, 13.6469, 37.1043, 15.21, 36.0878, 16.7079, 35.0072, 18.1381, 33.8664, 19.4981, 32.6696, 20.786, 31.4205, 22, 30.1235, 23.1383, 28.7826, 24.1995, 27.4023, 25.1827, 25.9865, 26.0867, 24.5397, 26.9108, 23.0662, 27.6547, 21.5702, 28.3179, 20.056, 28.9006, 18.5278, 29.4029, 16.9899, 29.8251, 15.4465, 30.168, 13.9015, 30.4323, 12.3591, 30.619, 10.8231, 30.7294, 9.29743, 30.7649, 7.78588, 30.7271, 6.29201, 30.6177, 4.81939, 30.4387, 3.37137, 30.1859, 1.9192)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_5hqd2")
ShaderHandler = SubResource("Resource_obuyd")
polygonQuality = 200
shaderQuality = 300
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0
