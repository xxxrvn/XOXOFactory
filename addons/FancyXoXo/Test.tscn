[gd_scene load_steps=31 format=3 uid="uid://rc7owpla7mgs"]

[ext_resource type="Script" path="res://addons/FancyXoXo/Test.gd" id="1_67fru"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathShaderHandler.gd" id="2_0lgfn"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathDrawable.gd" id="2_f3cgx"]
[ext_resource type="Script" path="res://addons/FancyXoXo/CustomCombiEffects/EasyCCE.gd" id="3_emmth"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/SpiralHandler.gd" id="7_ovrq5"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/FactorPoint.gd" id="8_kn80v"]
[ext_resource type="Script" path="res://addons/FancyXoXo/WidthPathPolyHandlers/PolyFactorBezierHandler.gd" id="9_cqkuq"]

[sub_resource type="Shader" id="Shader_cqoaa"]
code = "shader_type canvas_item;
 uniform vec2 positions[101];
 uniform vec2 norms[101];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 101-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==101-1){
				float d1=length(positions[101-1]-positions[101-2]);
				float d2=length(uv-positions[101-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(101+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dfwiy"]
shader = SubResource("Shader_cqoaa")
shader_parameter/positions = PackedVector2Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100)
shader_parameter/norms = PackedVector2Array(0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107)
shader_parameter/time = 160.487
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_puh1n"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_mysdt"]
gradient = SubResource("Gradient_puh1n")

[sub_resource type="Resource" id="Resource_wafln"]
script = ExtResource("8_kn80v")
p = Vector2(100, 100)
f = 1.0

[sub_resource type="Resource" id="Resource_jxwkk"]
script = ExtResource("8_kn80v")
p = Vector2(150, 150)
f = 1.0

[sub_resource type="Resource" id="Resource_p5iyy"]
script = ExtResource("8_kn80v")
p = Vector2(200, 250)
f = 1.0

[sub_resource type="Resource" id="Resource_r4yw1"]
script = ExtResource("8_kn80v")
p = Vector2(250, 300)
f = 1.0

[sub_resource type="Resource" id="Resource_lhfgx"]
script = ExtResource("8_kn80v")
p = Vector2(300, 400)
f = 1.0

[sub_resource type="Resource" id="Resource_g6o6w"]
script = ExtResource("9_cqkuq")
Points = Array[ExtResource("8_kn80v")]([SubResource("Resource_wafln"), SubResource("Resource_jxwkk"), SubResource("Resource_p5iyy"), SubResource("Resource_r4yw1"), SubResource("Resource_lhfgx")])
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_hldsy"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_4wnyg"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_eklyd"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_g5yct"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP"
DeleteShaderFile = false
shaderQuality = 100
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_hldsy")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_4wnyg")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_eklyd")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[sub_resource type="Shader" id="Shader_b0eg0"]
code = "shader_type canvas_item;
 uniform vec2 positions[101];
 uniform vec2 norms[101];
uniform float time;
uniform float width;
uniform vec4 color1 : source_color;
uniform vec4 color2 : source_color;
uniform vec4 color3 : source_color;
uniform vec4 color4 : source_color;
uniform vec4 outlinecolor : source_color;
uniform float outlinewidth;

uniform float wf1;
uniform bool quad1;
uniform bool quad2;


uniform float CUF1;
uniform float CUF2;
uniform float CUF3;
uniform float CUF4;

uniform vec4 CUC1 : source_color;
uniform vec4 CUC2 : source_color;
uniform vec4 CUC3 : source_color;
uniform vec4 CUC4 : source_color;

uniform float wf2;


uniform bool grad1b;
uniform bool grad2b;
uniform bool grad3b;
uniform float lenadjust;
uniform int combmode1;
uniform int combmode2;
uniform int combmode3;
uniform bool alphaignore;

vec4 rgb2hsv(vec4 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec4(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x,c.w);
}
vec4 maxv(vec4 a,vec4 b){
	return vec4(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z),max(a.w,b.w));
}
vec4 minv(vec4 a,vec4 b){
	return vec4(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z),min(a.w,b.w));
}
vec4 maxn(vec4 a,vec4 b){
	if(length(a)>length(b))return a;
	return b;
}
vec4 powv(vec4 a,float b){
	return vec4(pow(a.x,b),pow(a.y,b),pow(a.z,b),pow(a.w,b));
}
vec4 minn(vec4 a,vec4 b){
	if(length(a)>length(b))return b;
	return a;
}
float triwave(float a){
	return 2.*abs(a-floor(a+0.5));
}
float circwave(float a){
	return (-sign(mod(a,4.)-2.))*pow(1.-pow(mod(a,2.)-1.,2.),0.5)/2.+0.5;
}
float squircwave(float a,float b){
	return (-sign(mod(abs(a),4.)-2.))*pow(1.-pow(mod(abs(a),2.)-1.,b),1./b)/2.+0.5;
}
float squircbounce(float a,float b){
	return abs(pow(1.-pow(mod(abs(a),2.)-1.,b),1./b));
}
float bouncewave(float a){
	return abs(pow(1.-pow(mod(a,2.)-1.,2.),0.5));
}
float sinbounce(float a){
	return abs(sin(a*PI*2.));
}
float quadwave(float a){
	if(int(a)%2==0)return 0.;
	return 1.;
}
float parasaw(float a, float b,float c){
	return pow(mod(pow(mod(a,1.),b)*sign(mod(a,2.)-1.),1.),c);
}
vec4 binClamp(vec4 a, int flags,float mins,float maxs){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=clamp(a.x,mins,maxs);
	}
	if((flags&2)!=0){
		c.y=clamp(a.y,mins,maxs);
	}
	if((flags&4)!=0){
		c.z=clamp(a.z,mins,maxs);
	}
	if((flags&8)!=0){
		c.w=clamp(a.w,mins,maxs);
	}
	return c;
}
vec4 binMod(vec4 a, int flags,float mods){
	vec4 c=a;
	if((flags&1)!=0){
		c.x=mod(a.x,mods);
	}
	if((flags&2)!=0){
		c.y=mod(a.y,mods);
	}
	if((flags&4)!=0){
		c.z=mod(a.z,mods);
	}
	if((flags&8)!=0){
		c.w=mod(a.w,mods);
	}
	return c;
}
float muffin(float factor,float dist){
	return max(abs(1.-dist/factor),0.)*factor;
}

float smoother(float a,int b){
	int ix=0;
	while(ix<=b){
	a = 1. / (1. + a);
	a = (a - 0.5) / (1.0 - 0.5);
	a=1.-a;
	ix++;
	}
	return a;
}
vec2 rotn(vec2 dis, vec2 dir) {
	return vec2(
		dir.x * dis.x - dir.y * dis.y,
		dir.y * dis.x + dir.x * dis.y 
	);
}
vec4 hsv2rgb(vec4 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return vec4(c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y),c.w);
}
vec4 hue_shift(vec4 a, float b){
	vec4 hsv=rgb2hsv(a);
	hsv.x+=b;
	return hsv2rgb(hsv);
}

float rep(float b,float r,int rept,float extra,float extra2){
	if(rept==0)return b*r;
	if (rept==1)return triwave(b*r);
	if (rept==2)return sin(b*r*PI*2.)/2.+0.5;
	if (rept==3)return circwave(b*r*2.);
	if (rept==4)return quadwave(b*r*2.);
	if (rept==5)return mod(b*r,1.);
	if (rept==6)return bouncewave(b*r*2.);
	if (rept==7)return sinbounce(b*r);
	if (rept==8)return squircwave(b*r,extra);
	if (rept==9)return squircbounce(b*r,extra);
	if (rept==10)return parasaw(b*r,extra,extra2);
	
	
	
	return b;
}
float pochhammer(float a,int b){
	int n=0;
	float c=a;
	while(n>=b){
		c=pow(c,a);
	}
	return c;
}
float steps(float a,float b){
	return floor(a/b)*b;
}
void fragment() {
	float CRF1=0.;
	float CRF2=0.;
	float CRF3=0.;
	float CRF4=0.;
	float IRF1=0.;
	float IRF2=0.;
	float IRF3=0.;
	float IRF4=0.;
	vec4 CRC1=vec4(0);
	vec4 CRC2=vec4(0);
	vec4 CRC3=vec4(0);
	vec4 CRC4=vec4(0);
	vec4 IRC1=vec4(0);
	vec4 IRC2=vec4(0);
	vec4 IRC3=vec4(0);
	vec4 IRC4=vec4(0);
	float online=0.;
	float distance =  1e10; // Start with a very large distance
	float len=0.;
	vec2 rot=vec2(0);
	int n = 0;
	vec2 pos=vec2(0);
	vec2 norm=vec2(0);
	vec2 onorm=vec2(0);
	bool endpoint=false;
	bool isquad=false;
	vec2 uv=UV/TEXTURE_PIXEL_SIZE;
	int nu=0;
	endpoint=false;
	while (n <= 101-1) {
		vec2 offset=uv-positions[n];
		float d = length(offset);
		vec2 nod=vec2(dot(offset,norms[n]),dot(offset,vec2(-norms[n].y,norms[n].x)));
		
		if(n!=0)len+=length(positions[n]-positions[n-1]);
		if (d < distance && nod.y>0. ||n==0) {
			endpoint=false;
			distance = d;
			pos=positions[n];
			norm=norms[n];
			onorm=vec2(-norms[n].y,norms[n].x);
			nu=n;
			if(n==101-1){
				float d1=length(positions[101-1]-positions[101-2]);
				float d2=length(uv-positions[101-2]);
				if(d2>d1)endpoint=true;
				if(quad2){endpoint=false;}
				}
			if(n==0){
				float d1=length(positions[0]-positions[1]);
				float d2=length(uv-positions[1]);
				if(d2/2.>d1)endpoint=true;
				if(quad1){endpoint=false;}
				}
			online=len+(dot(offset,onorm));
			
		}
		
		n += 1;
	}
	float fac=dot(uv-pos,norm);
	if(!quad1){
		if(online<=0.){fac=length(vec2(abs(fac),online));}
	}else{
		if(online<=width){fac=max(abs(fac),width/2.-online);}
	}
	if(!quad2){
		if(online>=len){fac=length(vec2(abs(fac),online-len));}
	}else{
		if(online>=len-width){fac=max(abs(fac),online-len+width/2.);}
	}
	float fac1=abs(fac);
	float fac2=abs(fac);
	
	/**/
	if(grad1b){fac1=pow(1.+2./(wf1*width),fac1)/2.;}
	else fac1=fac1/(wf1*width)*2.;
	float onlineO=online;
	fac1=max(fac1,0.);
	fac1=min(fac1,1.);
	
	
		
		
	if(grad2b){fac2=pow(1.+2./(wf2*width),fac2)/2.;}
	else fac2=fac2/(wf2*width)*2.;
	
	fac2=max(fac2,0.);
	fac2=min(fac2,1.);
	

	
	
	if(grad3b)
	online=pow(1.+1./len,online);
	else online/=len;
	
	online*=pow(float(nu+4)/float(101+4),lenadjust);

		
	vec4 color1x=color1;
	vec4 color2x=color2;
	vec4 color3x=color3;
	vec4 color4x=color4;
	vec4 colora=color1;
	
	



	IRC1=color1x;
	IRC2=color2x;
	colora=mix(IRC1,IRC2,fac1);





vec4 colorb=color3;
	
	



	IRC1=color3x;
	IRC2=color4x;
	colorb=mix(IRC1,IRC2,fac2);





vec4 color=colora;





	IRC1=colora;
	IRC2=colorb;
	color=mix(IRC1,IRC2,online);




		
	if(alphaignore)color.w=1.;
	
	if(abs(fac)>=width/2.-outlinewidth*2.){color=outlinecolor;}

	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rkpjv"]
shader = SubResource("Shader_b0eg0")
shader_parameter/positions = PackedVector2Array(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100)
shader_parameter/norms = PackedVector2Array(0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107, 0.707107, -0.707107)
shader_parameter/time = 160.487
shader_parameter/width = 20.0
shader_parameter/color1 = Color(0.4, 0.2, 0.6, 1)
shader_parameter/color2 = Color(0.545098, 0, 0.545098, 1)
shader_parameter/color3 = Color(0.498039, 1, 0.831373, 1)
shader_parameter/color4 = Color(0, 0.392157, 0, 1)
shader_parameter/outlinecolor = Color(0, 0, 0, 1)
shader_parameter/outlinewidth = 2.0
shader_parameter/wf1 = 1.0
shader_parameter/quad1 = false
shader_parameter/quad2 = false
shader_parameter/CUF1 = null
shader_parameter/CUF2 = null
shader_parameter/CUF3 = null
shader_parameter/CUF4 = null
shader_parameter/CUC1 = null
shader_parameter/CUC2 = null
shader_parameter/CUC3 = null
shader_parameter/CUC4 = null
shader_parameter/wf2 = 1.0
shader_parameter/grad1b = false
shader_parameter/grad2b = false
shader_parameter/grad3b = false
shader_parameter/lenadjust = 0.0
shader_parameter/combmode1 = null
shader_parameter/combmode2 = null
shader_parameter/combmode3 = null
shader_parameter/alphaignore = false

[sub_resource type="Gradient" id="Gradient_bdigl"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_3gn16"]
gradient = SubResource("Gradient_bdigl")

[sub_resource type="Resource" id="Resource_5hqd2"]
script = ExtResource("7_ovrq5")
standartX = 40.0
standartY = 40.0
variantX = 50.0
variantY = 50.0
pseudoX = 1.0
pseudoY = 1.0
powerX = 1.0
powerY = 1.0
adjustX = 0.0
adjustY = 0.0
length = 1.5
logarythmic = true
startpoint_is_circle = true
endpoint_is_circle = true
width = 20.0

[sub_resource type="Resource" id="Resource_uod5l"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_upp4r"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_ivaai"]
script = ExtResource("3_emmth")
HSV = false
mode = "Normal"
CreateCustom = false

[sub_resource type="Resource" id="Resource_obuyd"]
script = ExtResource("2_0lgfn")
ClickToUpdate = false
shaderid = "TestWP2"
DeleteShaderFile = false
shaderQuality = 300
CustomInterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects1 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_uod5l")])
CustomAfterEffects1 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects2 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_upp4r")])
CustomAfterEffects2 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])
CustomInterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomInterEffects/CustomInterEffect.gd")]([])
CustomCombiEffects3 = Array[Resource("res://addons/FancyXoXo/CustomCombiEffects/CustomCombiEffect.gd")]([SubResource("Resource_ivaai")])
CustomAfterEffects3 = Array[Resource("res://addons/FancyXoXo/CustomAfterEffects/CustomAfterEffect.gd")]([])

[node name="Test" type="Node2D"]
script = ExtResource("1_67fru")

[node name="WPDTest" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_dfwiy")
texture = SubResource("GradientTexture2D_mysdt")
polygon = PackedVector2Array(92.3347, 106.422, 90.5283, 103.207, 90.0099, 99.5562, 90.85, 95.9656, 92.9343, 92.9235, 95.9795, 90.8438, 99.5714, 90.0092, 103.222, 90.5331, 106.434, 92.3445, 107.076, 92.9343, 113.613, 99.7639, 120.088, 107.064, 126.514, 114.77, 132.901, 122.826, 139.259, 131.179, 145.593, 139.784, 151.909, 148.594, 158.209, 157.571, 164.497, 166.677, 170.775, 175.882, 177.044, 185.158, 183.307, 194.482, 189.565, 203.835, 195.819, 213.204, 202.07, 222.578, 208.321, 231.953, 214.571, 241.328, 220.822, 250.709, 227.076, 260.102, 233.334, 269.522, 239.596, 278.986, 245.865, 288.517, 252.14, 298.142, 258.423, 307.891, 264.714, 317.801, 271.013, 327.91, 277.32, 338.264, 283.634, 348.91, 289.954, 359.899, 296.281, 371.293, 302.611, 383.147, 308.943, 395.525, 309.299, 396.322, 310, 399.942, 309.341, 403.571, 307.412, 406.713, 304.475, 408.943, 300.929, 409.957, 297.257, 409.616, 293.958, 407.969, 291.481, 405.237, 291.057, 404.475, 284.889, 392.415, 278.719, 380.861, 272.546, 369.746, 266.366, 359, 260.18, 348.571, 253.987, 338.405, 247.786, 328.452, 241.577, 318.672, 235.36, 309.024, 229.135, 299.477, 222.904, 290.002, 216.666, 280.576, 210.424, 271.179, 204.178, 261.797, 197.929, 252.422, 191.679, 243.047, 185.43, 233.672, 179.181, 224.302, 172.935, 214.946, 166.693, 205.616, 160.456, 196.33, 154.225, 187.112, 148.003, 177.989, 141.791, 168.992, 135.591, 160.159, 129.407, 151.531, 123.241, 143.156, 117.099, 135.085, 110.986, 127.375, 104.912, 120.09, 98.8875, 113.298, 92.9235, 107.066)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_g6o6w")
ShaderHandler = SubResource("Resource_g5yct")
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0

[node name="WPDTest2" type="Polygon2D" parent="."]
material = SubResource("ShaderMaterial_rkpjv")
position = Vector2(501, 431)
texture = SubResource("GradientTexture2D_3gn16")
polygon = PackedVector2Array(30.056, 1.05655, 30.3492, -2.61939, 31.9547, -5.93912, 34.6543, -8.45123, 38.0808, -9.81411, 41.7683, -9.84242, 45.2153, -8.53231, 47.9532, -6.06195, 49.6095, -2.76726, 49.8141, -1.9192, 50.2216, 0.432476, 50.5206, 2.85044, 50.7023, 5.29712, 50.7649, 7.76677, 50.7066, 10.2536, 50.5258, 12.7517, 50.2215, 15.2548, 49.7928, 17.7572, 49.2391, 20.2524, 48.5602, 22.7343, 47.7561, 25.1964, 46.8273, 27.6326, 45.7743, 30.0365, 44.5982, 32.4019, 43.3004, 34.7224, 41.8824, 36.9919, 40.3464, 39.204, 38.6944, 41.3528, 36.9291, 43.4321, 35.0536, 45.4361, 33.0709, 47.359, 30.9844, 49.1952, 28.7983, 50.939, 26.5164, 52.5853, 24.1431, 54.1288, 21.6831, 55.5645, 19.1414, 56.8878, 16.5231, 58.0941, 13.8336, 59.1792, 11.0786, 60.1389, 8.26386, 60.9696, 5.39551, 61.6678, 2.47992, 62.2303, -0.47662, 62.6541, -3.46723, 62.9366, -6.48543, 63.0757, -9.52405, 63.0694, -12.5762, 62.9159, -15.6347, 62.6142, -18.6924, 62.1632, -21.7419, 61.5623, -24.7758, 60.8115, -27.7868, 59.9107, -30.7673, 58.8607, -33.7102, 57.6621, -36.6079, 56.3163, -39.4531, 54.8248, -42.2384, 53.1898, -44.9566, 51.4135, -47.6005, 49.4987, -50.1632, 47.4484, -52.6377, 45.2661, -55.0173, 42.9556, -57.2952, 40.5209, -59.4652, 37.9667, -61.5209, 35.2976, -63.4565, 32.5189, -65.266, 29.6358, -66.944, 26.6542, -68.4851, 23.5802, -69.8845, 20.42, -71.1373, 17.1802, -72.2392, 13.8675, -73.186, 10.4892, -73.9742, 7.05243, -74.6002, 3.56477, -75.061, 0.0338358, -75.3539, -3.53244, -75.4767, -7.12617, -75.4273, -10.7391, -75.2043, -14.363, -74.8066, -17.9894, -74.2334, -21.61, -73.4844, -25.2162, -72.5597, -28.7994, -71.4598, -32.3511, -70.1857, -35.8627, -68.7387, -39.3256, -67.1205, -42.7313, -65.3335, -46.0714, -63.3802, -49.3374, -61.2636, -52.5211, -58.9872, -55.6143, -56.5549, -58.609, -53.9709, -61.4974, -51.2398, -64.2718, -48.3668, -66.9246, -45.3571, -69.4488, -42.2166, -71.8373, -38.9514, -74.0834, -35.568, -76.1804, -32.0733, -78.1225, -28.4741, -79.9037, -24.7784, -81.5184, -20.9935, -82.9615, -17.1275, -84.2282, -13.1887, -85.314, -9.18554, -86.2149, -5.12688, -86.9272, -1.02141, -87.4477, 3.12156, -87.7736, 7.29304, -87.9025, 11.4833, -87.8324, 15.683, -87.5619, 19.8825, -87.0899, 24.0722, -86.4159, 28.2422, -85.5398, 32.3828, -84.4618, 36.484, -83.183, 40.5365, -81.7044, 44.5302, -80.0281, 48.4554, -78.1563, 52.3028, -76.0916, 56.0626, -73.8373, 59.7257, -71.3971, 63.2827, -68.7751, 66.7247, -65.976, 70.0429, -63.0047, 73.2286, -59.8668, 76.2735, -56.5681, 79.1696, -53.115, 81.9089, -49.5143, 84.484, -45.773, 86.8877, -41.8987, 89.1132, -37.8992, 91.1541, -33.7829, 93.0042, -29.5581, 94.6578, -25.2337, 96.1097, -20.8192, 97.3551, -16.3237, 98.3894, -11.757, 99.2088, -7.129, 99.8099, -2.45005, 100.189, 2.26985, 100.345, 7.01988, 100.275, 11.7896, 99.9775, 16.5682, 99.4515, 21.3446, 98.6967, 26.1082, 97.7132, 30.8477, 96.5014, 35.5523, 95.0626, 40.2108, 93.3984, 44.8123, 91.511, 49.346, 89.4032, 53.8009, 87.0781, 58.1663, 84.5395, 62.4317, 81.7918, 66.5864, 78.8398, 70.6203, 75.6887, 74.5234, 72.3443, 78.2858, 68.813, 81.8979, 65.1015, 85.3505, 61.217, 88.6346, 57.1673, 91.7415, 52.9603, 94.6629, 48.6046, 97.3909, 44.1092, 99.9179, 39.4833, 102.237, 34.7365, 104.341, 29.879, 106.224, 24.9211, 107.881, 19.8732, 109.305, 14.7463, 110.492, 9.55164, 111.439, 4.3005, 112.14, -0.995585, 112.593, -6.32472, 112.796, -11.675, 112.745, -17.0345, 112.44, -22.391, 111.88, -27.7324, 111.064, -33.0463, 109.992, -38.3205, 108.665, -43.5429, 107.085, -48.7011, 105.253, -53.783, 103.173, -58.7767, 100.846, -63.67, 98.2777, -68.4514, 95.4714, -73.1095, 92.432, -77.6324, 89.1653, -82.0094, 85.677, -86.2295, 81.9737, -90.2822, 78.0625, -94.1571, 73.951, -97.8446, 69.6472, -101.335, 65.1597, -104.619, 60.4977, -107.688, 55.6705, -110.534, 50.6881, -113.148, 45.5609, -115.525, 40.2995, -117.656, 34.9154, -119.535, 29.4196, -121.157, 23.824, -122.517, 18.1409, -123.609, 12.3825, -124.43, 6.56138, -124.974, 0.721852, -124.999, -0.150179, -124.265, -3.76394, -122.27, -6.86586, -119.288, -9.03414, -115.722, -9.97392, -112.058, -9.55739, -108.794, -7.84122, -106.374, -5.05876, -105.127, -1.58839, -105.026, -0.721857, -104.565, 4.23777, -103.877, 9.12128, -102.961, 13.9494, -101.822, 18.7115, -100.463, 23.3975, -98.8904, 27.9971, -97.1079, 32.5009, -95.1215, 36.899, -92.937, 41.1825, -90.561, 45.3424, -88.0002, 49.3703, -85.2616, 53.258, -82.3529, 56.9978, -79.2819, 60.5821, -76.0566, 64.0043, -72.6857, 67.2576, -69.1776, 70.336, -65.5415, 73.2338, -61.7866, 75.9459, -57.9223, 78.4673, -53.9581, 80.7941, -49.9036, 82.9222, -45.769, 84.8485, -41.564, 86.5701, -37.2989, 88.0846, -32.9837, 89.3903, -28.6287, 90.4858, -24.2439, 91.3702, -19.8395, 92.0433, -15.4257, 92.5051, -11.0126, 92.7562, -6.6101, 92.7978, -2.22831, 92.6313, 2.12303, 92.259, 6.43443, 91.6832, 10.6963, 90.9068, 14.8995, 89.9333, 19.0349, 88.7665, 23.0934, 87.4106, 27.0669, 85.8702, 30.9465, 84.1503, 34.7246, 82.2564, 38.3933, 80.1941, 41.9451, 77.9696, 45.3731, 75.5892, 48.6702, 73.0597, 51.8303, 70.3881, 54.8472, 67.5816, 57.7153, 64.6479, 60.4294, 61.5946, 62.9845, 58.4298, 65.3762, 55.1616, 67.6005, 51.7983, 69.6537, 48.3485, 71.5327, 44.8207, 73.2346, 41.2236, 74.7572, 37.5662, 76.0986, 33.8573, 77.2573, 30.1057, 78.2323, 26.3204, 79.023, 22.5104, 79.6292, 18.6846, 80.0513, 14.8518, 80.2898, 11.021, 80.346, 7.20087, 80.2214, 3.39983, 79.918, -0.37331, 79.4379, -4.11047, 78.7841, -7.8031, 77.9596, -11.4434, 76.9679, -15.0235, 75.8128, -18.5357, 74.4985, -21.9725, 73.0296, -25.3269, 71.4108, -28.592, 69.6473, -31.7612, 67.7447, -34.8279, 65.7084, -37.7863, 63.5445, -40.6306, 61.2594, -43.3554, 58.8592, -45.9556, 56.3508, -48.4264, 53.7409, -50.7634, 51.0367, -52.9626, 48.2451, -55.0204, 45.3735, -56.9334, 42.4293, -58.6986, 39.4201, -60.3135, 36.3535, -61.776, 33.237, -63.0841, 30.0784, -64.2365, 26.8853, -65.2322, 23.6656, -66.0704, 20.4269, -66.7509, 17.1769, -67.2738, 13.9233, -67.6395, 10.6734, -67.8488, 7.43492, -67.903, 4.21527, -67.8035, 1.02141, -67.5523, -2.13929, -67.1516, -5.26009, -66.6039, -8.33398, -65.9121, -11.3545, -65.0795, -14.3151, -64.1095, -17.2098, -63.0058, -20.0325, -61.7726, -22.7773, -60.4142, -25.439, -58.9351, -28.0123, -57.3401, -30.492, -55.6344, -32.8736, -53.8231, -35.1528, -51.9116, -37.3252, -49.9057, -39.3872, -47.811, -41.3353, -45.6335, -43.1662, -43.3793, -44.8771, -41.0545, -46.4654, -38.6655, -47.9288, -36.2186, -49.2656, -33.7201, -50.4741, -31.1766, -51.553, -28.5946, -52.5015, -25.9806, -53.3189, -23.3412, -54.005, -20.6827, -54.5597, -18.0119, -54.9835, -15.335, -55.2771, -12.6584, -55.4414, -9.98845, -55.4777, -7.33131, -55.3876, -4.69313, -55.173, -2.07973, -54.8359, 0.502911, -54.3789, 3.04917, -53.8047, 5.5534, -53.116, 8.01045, -52.3162, 10.4149, -51.4086, 12.762, -50.3969, 15.0469, -49.2849, 17.265, -48.0767, 19.412, -46.7764, 21.4837, -45.3885, 23.4763, -43.9174, 25.3863, -42.368, 27.2101, -40.745, 28.9448, -39.0534, 30.5873, -37.2982, 32.1353, -35.4846, 33.5863, -33.6176, 34.9384, -31.7028, 36.1897, -29.7454, 37.3388, -27.7507, 38.3845, -25.724, 39.3258, -23.6708, 40.162, -21.5964, 40.8929, -19.5062, 41.5182, -17.4055, 42.0381, -15.2995, 42.4531, -13.1934, 42.7637, -11.0923, 42.971, -9.00131, 43.0762, -6.92522, 43.0806, -4.86904, 42.9858, -2.83722, 42.7939, -0.834581, 42.5068, 1.1347, 42.127, 3.06621, 41.6568, 4.95597, 41.0991, 6.80003, 40.4567, 8.59459, 39.7328, 10.3362, 38.9304, 12.0213, 38.0531, 13.6469, 37.1043, 15.21, 36.0878, 16.7079, 35.0072, 18.1381, 33.8664, 19.4981, 32.6696, 20.786, 31.4205, 22, 30.1235, 23.1383, 28.7826, 24.1995, 27.4023, 25.1827, 25.9865, 26.0867, 24.5397, 26.9108, 23.0662, 27.6547, 21.5702, 28.3179, 20.056, 28.9006, 18.5278, 29.4029, 16.9899, 29.8251, 15.4465, 30.168, 13.9015, 30.4323, 12.3591, 30.619, 10.8231, 30.7294, 9.29743, 30.7649, 7.78588, 30.7271, 6.29201, 30.6177, 4.81939, 30.4387, 3.37137, 30.1859, 1.9192)
script = ExtResource("2_f3cgx")
PolyHandler = SubResource("Resource_5hqd2")
ShaderHandler = SubResource("Resource_obuyd")
polygonQuality = 200
shaderQuality = 300
inner1 = Color(0.4, 0.2, 0.6, 1)
outer1 = Color(0.545098, 0, 0.545098, 1)
inner2 = Color(0.498039, 1, 0.831373, 1)
outer2 = Color(0, 0.392157, 0, 1)
OutlineSize = 2.0
